function plot_every_figure(fignumber)


    
    switch fignumber
        case 1
            fig1;
        case 2
            fig2;
        case 3
            fig3;


        case 4
            fig4;
        case 5 
            fig5;
        case 6
            fig6;
        case 6.5
            fig6b;
        case 7
            fig7;%3D
        case 7.5
            fig7b;
        case 8
            fig8;
        case 9
            fig9;
        case 10
            fig10;
        case 11
            fig11;
        case 31
            figS1;
        case 32
            figS2S3;
        case 33
            figS4;
        case 34
            figS5;
        case 35
            figS6;
        case 90
            figS8S9;
        case 91
            figS10S11;
        case 92
            figS12S13;
        case 93
            figS14;
        case 27
            figP_3Dlosscurve_vsNtrain;
    end

 
%         case 4
%             fig_24110603test;




%         case 14
%             fig_24110603losscurve;
%         
%         case 16 
%             fig_24121602optm;%2D
%         case 17
%             fig_corrmap_4D;
% 
%         case 19
%             fig_3Dlosscurve_10kdata;
%         case 20
%             table_3DNNfeature;
%         case 21
%             dataTable3D_test_10kdata;
%         case 22
%             dataTable3D_optm_10kdata;
%         case 23
%             fig_3Dinfer_meanR2;
%         case 24
%             fig_3Dinfer_paraR2;
% 
%         case 25
%             fig_2Dinfer_meanR2;
%         case 26
%             fig_2Dinfer_paraR2;
% % 
% 
%     end



end

function fig1
    fs = 40; ms = 20;
    % Load data: generated by prepare_fig1_confidence_data.ipynb
    d = load('prepare_fig1_confidence_data.mat');
    x = d.test_x;
    low = d.lower_rescaledback;
    up  = d.upper_rescaledback;
    y   = d.subjins25;
    
    % Mean curve
    meanval = [358.5663,192.7986,152.8831,93.8441,61.7299,21.0156,11.5079,8.3109,6.8725,...
               6.3893,5.4048,5.6017,4.9837,5.5729,6.0399,5.7293];
    % Main plot
    figure;
    ax1 = subplot(1,1,1);
    fill(ax1,[x,fliplr(x)],[low,fliplr(up)],'r','FaceAlpha',.5); hold(ax1,'on');
    plot(ax1,x,y(~ismember(1:size(y,1),[3,11,18,25]),:),'k.','MarkerSize',ms);
    plot(ax1,x,meanval,'b-','LineWidth',2);
    xlabel(ax1,'Time'); ylabel(ax1,'Insulin level');
    grid(ax1,'on'); axis(ax1,[20 185 0 550]); set(ax1,'FontSize',fs);
    
    % Zoomed inset
    ax2 = axes('Position',[.25 .35 .65 .45]);
    fill(ax2,[x,fliplr(x)],[low,fliplr(up)],'r','FaceAlpha',.5); hold(ax2,'on');
    idx = x > 40;
    plot(ax2,x(idx),y(~ismember(1:size(y,1),[3,11,18,25]),idx),'k.','MarkerSize',ms);
    plot(ax2,x,meanval,'b-','LineWidth',2);
    grid(ax2,'on'); axis(ax2,[40 185 0 20]); set(ax2,'FontSize',fs);
    set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure 1.png'); 
end




function fig2
    gludata = importdata('25FSIGT_Glu.csv');
    FFAdata = importdata('25FSIGT_FFA.csv');    
    GIF0 = importdata('25FSIGT_GIF0.csv');

    all6para=importdata('GFX3DoptmRelGluFFAsimult_25FSIGT_fromdenoiseFFA_01_to_25.csv');
    alloptmpara=zeros(25,11); 
    alloptmpara(:,1:6)=all6para;
    alloptmpara(:,7:9)=GIF0;
    alloptmpara(:,10)=gludata(:,1);
    alloptmpara(:,11)=FFAdata(:,1);

    alloptmpara_used=[alloptmpara(:,1:7),alloptmpara(:,9:11)];
    inused=importdata('prepare_fig2_parameterset3DdecF_mvlgnmDirect_first10kdata_of3930694.csv'); 
    figure; tiledlayout(3, 4);fs=30;
    columnNames = {'$S_I$','$C_X$','$S_G$','$X_2$','$C_F$','$L_2$','$G_b$','$F_b$','Initial condition of $G$','Initial condition of $F$'};
    
    tileOrder = [1, 2,5,6,9,10,3,7,4,8];
    IDexcludeOutliners=[1:2,4:10,12:17,19:24];

    num_params=10;
    for p = 1:num_params
        nexttile(tileOrder(p));
        histogram(inused(:,p) , 80, 'Normalization', 'probability','FaceColor','b');hold on;%.^(powers(p)
        histogram(alloptmpara_used(IDexcludeOutliners,p),20,'Normalization','probability','FaceColor','r');hold on
        xlim([min(alloptmpara_used(IDexcludeOutliners,p)) ,max(alloptmpara_used(IDexcludeOutliners,p)) ]);
        title(sprintf(columnNames{p}),'Interpreter','latex');
        set(gca, 'FontSize', fs);
    end
    set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure 2.png'); 
end


function fig3
    Para2= importdata('prepare_fig3_optmpara_2Dmodel.csv');
    in=importdata('prepare_fig3_parameterset2D_mvlgnmDirectparaphybd_first10kdata_of2877269.csv');
    figure; tiledlayout(2, 3);fs=40;
    columnNames = {'$S_{GF}$','$P_{X \\alpha}$',  '$S_{Fb}$', '$P_X$', '$F_b$'};
    IDexcludeOutliners=[1:2,5:10,12:17,19:24];
    parashow=Para2(IDexcludeOutliners,:);
    num_params=5;
    for p = 1:num_params
        nexttile;%(tileOrder(p));
        histogram(in(:,p) , 100, 'Normalization', 'probability','FaceColor','b');hold on;%.^(powers(p)
        histogram(parashow(:,p),20,'Normalization','probability','FaceColor','r');hold on
        xlim([min(parashow(:,p)) ,max(parashow(:,p)) ]);
        title(sprintf(columnNames{p},'Interpreter','latex'),'Interpreter','latex');
        set(gca, 'FontSize', fs);
    end
    set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure 3.png'); 
end


function fig4
    gludata = importdata('25FSIGT_Glu.csv');FFAdata = importdata('25FSIGT_FFA.csv');    
    chosensubjs=[1:2,4:10,12:17,19:24];
    simudata=importdata('prepare_fig4_3DdecF_mvlgnmDirect_first10kdata_of3930694.csv'); 
    optmG=importdata('GFX3D25_optmG.csv');optmF=importdata('GFX3D25_optmF.csv');
    simuG=simudata(:,2:4:62);simuF=simudata(:,4:4:64);
    experiG=gludata( chosensubjs,:);experiF=FFAdata( chosensubjs,:);
    Errorbars_GFtraj_3D(experiG,experiF,optmG( chosensubjs,:),optmF( chosensubjs,:),simuG,simuF)
end

function fig5
    FFAdata = importdata('25FSIGT_FFA_alltime.csv');    
    chosensubjs=[1:2,4:10,12:17,19:24];
    optmF2D=importdata('FX2D25LIP_optmF_241214.csv');
    simudata=importdata('Out250130FX2D25_mvlognmdirectparaphybd_2877269_first10k.csv');
    simuF=simudata(:,4:4:112);
    experiF=FFAdata( chosensubjs,:);
    Errorbars_GFtraj_2D(experiF,optmF2D( chosensubjs,:),simuF);
end


function Errorbars_GFtraj_3D(experiG,experiF,optmG,optmF,simuG,simuF)
%     t_vec22=[22,24,25,27,30,40,50,60,70,80,90,100,120,140,160,180] ;
    t_vec22=[22, 23, 24, 25, 27, 30, 40, 50, 60, 70, 80, 90, 100, 120, 150, 180];
    figure;fs=30;ms=10;lw1=30;lw2=20;lw3=10;
    tiledlayout(1,2);
    nexttile;
    errorbar(t_vec22, mean(experiG,1), std(experiG,0,1), 'o-','color','r','linewidth',lw1);hold on;
    errorbar(t_vec22, mean(optmG,1) , std(optmG,0,1), 'o-','color','k','linewidth',lw2);hold on;
    errorbar(t_vec22, mean(simuG(:,:),1) , std(simuG(:,:),0,1), 'o-','color','b','linewidth',lw3);hold on;
    xlim([20 180]);ylim([50 190]);
    set(gca,'FontSize',fs);
    nexttile;
    errorbar(t_vec22, mean(experiF,1), std(experiF,0,1), 'o-','color','r','linewidth',lw1);hold on;
    errorbar(t_vec22, mean(optmF,1) , std(optmF,0,1), 'o-','color','k','linewidth',lw2);hold on;
    errorbar(t_vec22, mean(simuF(:,:),1) , std(simuF(:,:),0,1), 'o-','color','b','linewidth',lw3);hold on;
    xlim([20 180]);ylim([0 650]);
    set(gca,'FontSize',fs);
        set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure 4.png'); 
end


function Errorbars_GFtraj_2D(experiF,optmF,simuF)
    tbefore22=[0, 2, 3, 4, 5, 6, 8, 10, 12, 14, 16, 19, 22];
    %     t_vec22=[22,24,25,27,30,40,50,60,70,80,90,100,120,140,160,180] ;
    t_vec22=[22, 23, 24, 25, 27, 30, 40, 50, 60, 70, 80, 90, 100, 120, 150, 180];
    t_vec0to180=[tbefore22,t_vec22(2:end)];
    figure;fs=30;ms=30;lw1=30;lw2=20;lw3=10;
    errorbar(t_vec0to180, mean(experiF,1), std(experiF,0,1), 'o-','color','r','linewidth',lw1);hold on;
    errorbar(t_vec0to180, mean(optmF,1) , std(optmF,0,1), 'o-','color','k','linewidth',lw2);hold on;
    errorbar(t_vec0to180, mean(simuF(:,:),1) , std(simuF(:,:),0,1), 'o-','color','b','linewidth',lw3);hold on;
    xlim([0 185]); ylim([0 650]);
    set(gca,'FontSize',fs);
    ax = gca;
    ax.YAxis.TickLabelGapOffset = 15;   % move labels 5 points to the left
    set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure 5.png'); 
 end
 function fig6
     Ntrainshow = 5000;
    parainfertrain = importdata('paragiventrain_Mvlognormaldirect_25011504.csv');
    paratrain      = importdata('parainfertrain_Mvlognormaldirect_25011504.csv');
    fs    = 36;    % bumped up toward 40
    ms    = 30;
    msblue= 18;
    lw    = 4;
    columnNames = {'$S_I$','$C_X$','$S_G$','$X_2$','$C_F$','$L_2$','$G_b$','$F_b$','$G_{22}$','$F_{22}$'};
    
    figure;
    tiledlayout(2,4,'Padding','compact','TileSpacing','compact');  % make it tight
    
    for k = 1:8
        y_true = paratrain(:,k);
        y_pred = parainfertrain(:,k);
        X = [ones(length(y_pred),1), y_pred];
        [~,~,~,~,stats] = regress(y_true, X);
        R2_train = stats(1);
    
        nexttile; hold on;
            plot(paratrain(1:Ntrainshow,k), parainfertrain(1:Ntrainshow,k), 'b.','MarkerSize', msblue);
            min_val = min(paratrain(1:Ntrainshow,k));
            max_val = max(paratrain(1:Ntrainshow,k));
            plot([min_val, max_val], [min_val, max_val], 'k--','LineWidth', lw);
            xlim([min_val max_val]);
            ylim([min_val max_val]);
    
            title(columnNames{k}, 'FontSize', fs, 'Interpreter', 'latex');
            text(...
              min_val + 0.05*(max_val-min_val), ...
              max_val - 0.05*(max_val-min_val), ...
              sprintf('$R^2$ = %.3f', R2_train), ...
              'FontSize', fs-5, 'Interpreter', 'latex', ...
              'HorizontalAlignment','left','VerticalAlignment','top', ...
              'EdgeColor','k','BackgroundColor','w','Margin',5);
    
            box 'on'
            if k==1
                ax = gca;
                ax.XAxis.Exponent = 0;      % disable 10^−3 exponent
                xtickformat('%.3f');        % show 4 decimal places, e.g. 0.0020
            end
            if k>=5
                xlabel('True',    'FontSize', fs);
            end
            if mod(k,4)==1
                ylabel('Inferred','FontSize', fs);
            end
            set(gca,'FontSize',fs);
        hold off;
    end

    set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure 6.png'); 
 end
 

 


 function fig6b


   Ntrainshow=5000;
    paratrain=importdata('paratrain_24121602.csv');
    parainfertrain=importdata('parainfertrain_24121602.csv');
   Nsubset=100;
    fs=40;ms=30;msblue=18;lw=4;
    columnNames={'$S_{GF}$', '$S_{Fb}$', '$P_{X\alpha}$', '$P_X$', '$F_b$'};
     figure;tiledlayout(2,3);
        for k = 1:5
            y_true=paratrain(1:Nsubset,k);
            y_pred=parainfertrain(1:Nsubset,k);
            X = [ones(length(y_pred), 1), y_pred];  % Add a column of ones for the intercept
            [b, ~, ~, ~, stats] = regress(y_true, X);  % Perform linear regression
            p_train = stats(3);  % p-value for the regression model

            R2_train = stats(1);

            nexttile;hold on;
             plot(paratrain(1:Ntrainshow,k),parainfertrain(1:Ntrainshow,k),'b.','markersize',msblue);hold on;
            min_val = min(paratrain(1:Ntrainshow, k));
            max_val = max(paratrain(1:Ntrainshow, k));
            plot([min_val, max_val], [min_val, max_val], 'k--','linewidth',lw);
            xlim([min_val max_val]);
            ylim([min_val max_val]);

            title(sprintf('%s',columnNames{k}),'fontsize',fs,'Interpreter','latex');box 'on';  %.3f
      
            text(max_val - 0.05 * (max_val - min_val), min_val + 0.05 * (max_val - min_val), ...
                    sprintf('$R^2$ = %.4f', R2_train), ...%\n $p$=%.9f%, p_train
                    'HorizontalAlignment', 'right', 'VerticalAlignment', 'bottom', ...
                    'FontSize', fs , 'Interpreter', 'latex', 'EdgeColor', 'black', ...
                    'BackgroundColor', 'white', 'Margin', 5);
                %    $R^2$ value: 
            %     title(sprintf('%s    p-value: %.3f, %.3f;\n R2-value: %.3f, %.3f',columnNames{k}, p_train,p_real,R2_train,  R2_real));box 'on';
%             if k==1  
%                 ax = gca;
%                 ax.XAxis.Exponent = 0; ax.YAxis.Exponent = 0;       % disable 10^−3 exponent
%                 xtickformat('%.3f');ytickformat('%.3f');         % show 4 decimal places, e.g. 0.0020
%             elseif k==2
%                                 ax = gca;
%                 ax.XAxis.Exponent = 0;  ax.YAxis.Exponent = 0;      % disable 10^−3 exponent
%                 xtickformat('%.4f');        % show 4 decimal places, e.g. 0.0020
%                 ytickformat('%.4f');    
%             end
                        
            if k>=3
                xlabel('True');
            end
            if mod(k,3)==1
                ylabel('Inferred');
            end
            set(gca,'fontsize',fs);
            hold off;
        end
    set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure 6b.png'); 

 end


 


function fig7
Ntrainshow = 5000;

parainfertrain = importdata('paragiventrain_Mvlognormaldirect_25011504.csv');
paratrain      = importdata('parainfertrain_Mvlognormaldirect_25011504.csv');

parainfertest  = importdata('paragiventest_Mvlognormaldirect_25011504.csv');
paratest       = importdata('parainfertest_Mvlognormaldirect_25011504.csv');

gludata = importdata('25FSIGT_Glu.csv');
FFAdata = importdata('25FSIGT_FFA.csv');
GIF0    = importdata('25FSIGT_GIF0.csv');
all6para      = importdata('GFX3DoptmRelGluFFAsimult_25FSIGT_fromdenoiseFFA_01_to_25.csv');
alloptmpara   = zeros(25,11);
alloptmpara(:,1:6)   = all6para;
alloptmpara(:,7:9)   = GIF0;
alloptmpara(:,10)    = gludata(:,1);
alloptmpara(:,11)    = FFAdata(:,1);
alloptmpara_used     = [alloptmpara(:,1:7), alloptmpara(:,9:11)];

parainferoptm = importdata('parainferfromoptm_Mvlognormaldirect_25011504.csv');
paratrue      = alloptmpara_used(:,1:8);

fs     = 36;    % bumped up toward 40
ms     = 30;
msblue = 18;
lw     = 4;
chosensubjs = [1:2,4:10,12:17,19:24];
columnNames = {'$S_I$','$C_X$','$S_G$','$X_2$','$C_F$','$L_2$','$G_b$','$F_b$','$G_{22}$','$F_{22}$'};

figure;
tiledlayout(2,4,'Padding','compact','TileSpacing','compact');

for k = 1:8
    % --- test data fit
    y_true = paratest(:,k);
    y_pred = parainfertest(:,k);
    X = [ones(length(y_pred),1), y_pred];
    [~,~,~,~,stats] = regress(y_true, X);
    R2_test = stats(1);

    nexttile; hold on;
        plot(y_true(1:Ntrainshow), y_pred(1:Ntrainshow), 'b.','MarkerSize',msblue);
        min_val = min(y_true(1:Ntrainshow));
        max_val = max(y_true(1:Ntrainshow));
        plot([min_val,max_val], [min_val,max_val], 'k--','LineWidth',lw);

    % --- optm data overlay
        y_true = paratrue(chosensubjs,k);
        y_pred = parainferoptm(chosensubjs,k);
        plot(y_true, y_pred, 'm.','MarkerSize',ms);

        X = [ones(length(y_pred),1), y_pred];
        [~,~,~,~,stats] = regress(y_true, X);
        R2_optm = stats(1);

        xlim([min_val max_val]);
        ylim([min_val max_val]);

        title(columnNames{k}, 'FontSize', fs, 'Interpreter', 'latex');
        box on;

        % annotations
        text(...
          min_val + 0.05*(max_val-min_val), ...
          max_val - 0.05*(max_val-min_val), ...
          sprintf('Test: %.3f', R2_test), ...
          'FontSize', fs-5, 'Interpreter', 'latex', ...
          'HorizontalAlignment','left','VerticalAlignment','top', ...
          'EdgeColor','k','BackgroundColor','w','Margin',5);

        text(...
          max_val - 0.05*(max_val-min_val), ...
          min_val + 0.05*(max_val-min_val), ...
          sprintf('Optm: %.3f', R2_optm), ...
          'FontSize', fs-5, 'Interpreter', 'latex', ...
          'HorizontalAlignment','right','VerticalAlignment','bottom', ...
          'EdgeColor','k','BackgroundColor','w','Margin',5);
        if k==1  
                ax = gca;
                ax.XAxis.Exponent = 0;     % disable 10^−3 exponent
                xtickformat('%.3f');          % show 4 decimal places, e.g. 0.0020

        end
    if k>=5
        xlabel('True',     'FontSize', fs);
    end
    if mod(k,4)==1
        ylabel('Inferred', 'FontSize', fs);
    end
        set(gca,'FontSize',fs);
    hold off;
end

set(gcf,'PaperPositionMode','auto');
print(gcf,'-dpng','-r600','Figure 7.png');

end

function fig7b   
    Ntrainshow=5000;
    paratrain=importdata('paratrain_24121602.csv');
    parainfertrain=importdata('parainfertrain_24121602.csv');
    paratest=importdata('paratest_24121602.csv');
    parainfertest=importdata('parainfertest_24121602.csv');
    paraoptm=importdata('prepare_fig3_optmpara_2Dmodel.csv');
    paratrue=paraoptm(:,1:5);
    parainferoptm=importdata('parainferfromoptm_Mvlognormal25_24121602.csv');
    fs=40;ms=30;msblue=18;lw=4;
    chosensubjs=[1:2,4:10,12:17,19:24];
    columnNames={'$S_{GF}$', '$S_{Fb}$', '$P_{X\alpha}$', '$P_X$', '$F_b$'};
    figure;tiledlayout(2,3);
    for k = 1:5
        y_true=paratest(:,k);
        y_pred=parainfertest(:,k);
        X = [ones(length(y_pred), 1), y_pred];  % Add a column of ones for the intercept
        [b, ~, ~, ~, stats] = regress(y_true, X);  % Perform linear regression
        p_test = stats(3);  % p-value for the regression model
        R2_test = stats(1);        
        nexttile;hold on;
        plot(paratest(1:Ntrainshow,k),parainfertest(1:Ntrainshow,k),'b.','markersize',msblue);hold on;
        min_val = min(paratest(1:Ntrainshow, k));
        max_val = max(paratest(1:Ntrainshow, k));
        plot([min_val, max_val], [min_val, max_val], 'k--','linewidth',lw);
        xlim([min_val max_val]);
        ylim([min_val max_val]);
        y_true=paratrue(chosensubjs,k);
        y_pred=parainferoptm(chosensubjs,k);
        plot(y_true,y_pred,'m.','Markersize',ms);hold on;
        
        X = [ones(length(y_pred), 1), y_pred];  % Add a column of ones for the intercept
        [b, ~, ~, ~, stats] = regress(y_true, X);  % Perform linear regression
        p_optm = stats(3);  % p-value for the regression model
        R2_optm = stats(1);
        title(sprintf('%s',columnNames{k}),'fontsize',fs,'Interpreter','latex');box 'on';   %.3f
        
        text(min_val + 0.05 * (max_val - min_val),max_val - 0.05 * (max_val - min_val),  ...
        sprintf('Test:  %.3f', R2_test), ...%,R2_optm%\nOptm: $R^2$ = %.3f
        'HorizontalAlignment', 'left', 'VerticalAlignment', 'top', ...
        'FontSize', fs , 'Interpreter', 'latex', 'EdgeColor', 'black', ...
        'BackgroundColor', 'white', 'Margin', 5);
%         

         text(max_val - 0.03 * (max_val - min_val),min_val + 0.05 * (max_val - min_val),  ...
        sprintf('Optm:  %.3f', R2_optm), ...%Test: $p$ = %.4f\n
        'HorizontalAlignment', 'right', 'VerticalAlignment', 'bottom', ...
        'FontSize', fs , 'Interpreter', 'latex', 'EdgeColor', 'black', ...
        'BackgroundColor', 'white', 'Margin', 5); 
%                      text(max_val - 0.05 * (max_val - min_val),min_val + 0.05 * (max_val - min_val),  ...
%                     sprintf('Test: $p$ = %.4f\nOptm: $p$ = %.4f', p_test,p_optm), ...
%                     'HorizontalAlignment', 'right', 'VerticalAlignment', 'bottom', ...
%                     'FontSize', fs - 5, 'Interpreter', 'latex', 'EdgeColor', 'black', ...
%                     'BackgroundColor', 'white', 'Margin', 5); 
        if k>=3
            xlabel('True'); 
        end
        if mod(k,3)==1
            ylabel('Inferred');
        end
        set(gca,'fontsize',fs);hold off;
    end
    set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure 7b.png'); 
end


function fig8
    % Read the CSV file into a MATLAB table
    dataTable_1248kdata = readtable('dataTable_1248kdata_forFigureP.csv');
    % Sort dataTable_used in the order: npara -> activation -> FeatureType
    sortOrder = [ "Activation", "ntrain","FeatureType"]; % Sorting criteria
    dataTable_sorted = sortrows(dataTable_1248kdata(33:64,:), sortOrder, 'ascend');
    titles = {'Ntrain=1000','Ntrain=2000','Ntrain=4000','Ntrain=8000'};

    % Create figure
    figure;t=tiledlayout(2,4,'Padding','compact','TileSpacing','compact');
    fs = 24;lw=2;fs_label=24;fs_title=24;
    cell_color= {'r', 'g', 'b','k'};
     inset_ylim=1e-3.*[4.9 5.3;     2.9 3.5;    1.8 2.7;    0.9 1.3    ;...
                3.3 3.9;    1.95 2.4;    1.4 1.75;    0.65 0.9   ];
    for k = 1:8
        ax = nexttile(t,k);hold on;
        hold(ax, 'on'); box(ax, 'on');
        jobSubset = dataTable_sorted.JobNumber((k-1)*4 + (1:4)); % 4 jobs per subplot
        mat_valloss=zeros(4,2000);
        for i = 1:4
            jobNumber = jobSubset(i);
            filename = sprintf('train_val_losses/%d_val_losses.csv', jobNumber);     
            if exist(filename, 'file')
                val_losses = readmatrix(filename);
                mat_valloss(i,:)=val_losses';
            else
                fprintf('Skipping Job %d: File not found.\n', jobNumber);
            end
            plot(ax, 1:size(mat_valloss,2), mat_valloss(i,:), 'Color', cell_color{i}, 'LineWidth', lw);
            if k==5
                legend('No Feature Engineering','Concatenation','Reciprocals vs. time',...
                    'Mutual reciprocals', 'NumColumns', 1,'fontsize',20);    %legend('noFE','catonly','twithreci','fullreci', 'NumColumns', 2);
            end
        end
    
        xlim([0 2000]);
        set(gca,'fontsize',fs);
        if k==1
            ylabel('Validation loss with ReLU','fontsize',fs_label);
        elseif k==5
            ylabel('Validation loss with (tanh(x)+1)/2','fontsize',fs_label);
        end
        if k<=4
            title(titles{k},'fontsize',fs_title);     
        else
            xlabel('Epoch number','fontsize',fs_label);
        end
        insetPos = get(ax, 'Position');
    
        if k==1
            insetAx = axes('Position', [insetPos(1) - 0.035, insetPos(2) + 0.21, insetPos(3) * 0.7, insetPos(4) * 0.4], 'Parent', gcf);
            hold(insetAx, 'on'); box(insetAx, 'on');
        elseif k<=3
            insetAx = axes('Position', [insetPos(1) - 0.035, insetPos(2) + 0.19, insetPos(3) * 1.35, insetPos(4) * 0.5], 'Parent', gcf);
            hold(insetAx, 'on'); box(insetAx, 'on');
        elseif k==4
            insetAx = axes('Position', [insetPos(1) - 0.03, insetPos(2) + 0.19, insetPos(3) * 1.4, insetPos(4) * 0.5], 'Parent', gcf);
            hold(insetAx, 'on'); box(insetAx, 'on');
        elseif k==5
            insetAx = axes('Position', [insetPos(1) - 0.045, insetPos(2) + 0.02 , insetPos(3) * 1.3, insetPos(4) * 0.4], 'Parent', gcf);
            hold(insetAx, 'on'); box(insetAx, 'on');
        elseif k>=6
            insetAx = axes('Position', [insetPos(1) - 0.035, insetPos(2) + 0.05, insetPos(3) * 1.3, insetPos(4) * 0.7], 'Parent', gcf);
            hold(insetAx, 'on'); box(insetAx, 'on');
        end
        % Plot zoomed-in version inside the inset
        for i=1:4
            plot(insetAx, 1:size(mat_valloss,2), mat_valloss(i,:), 'Color', cell_color{i}, 'LineWidth', 1.5);
        end
        ylim(insetAx, inset_ylim(k,:)); 
        xlim(insetAx, [1500 2000]); % Focus on later epochs
        set(insetAx, 'XTick', [1500,1750,2000]);%, 'YTick', []);
        set(insetAx,'fontsize',fs);
    end
    set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure 8.png');    

end


function fig9
    % Read the CSV file into a MATLAB table
    dataTable_1248kdata = readtable('dataTable_1248kdata_forFigureP.csv');
    % Sort dataTable_used in the order: npara -> activation -> FeatureType
    sortOrder = [ "Activation", "ntrain","FeatureType"]; % Sorting criteria
    dataTable_sorted = sortrows(dataTable_1248kdata(1:32,:), sortOrder, 'ascend');
    titles = {'Ntrain=1000','Ntrain=2000','Ntrain=4000','Ntrain=8000'};

    % Create figure
    figure;t=tiledlayout(2,4,'Padding','compact','TileSpacing','compact');
    fs = 24;lw=2;fs_label=24;fs_title=24;
    cell_color= {'r', 'g', 'b','k'};
    inset_ylim=1e-3.*[4.2 5.2;     2.0 4.5;    41.75 43;    0.95 1.65    ;...
                    2.7 3.8;    1.6 2.3;    1.1 1.6;    0.7 0.95   ];
     
    for k = 1:8
        ax = nexttile(t,k);hold on;
        hold(ax, 'on'); box(ax, 'on');
        jobSubset = dataTable_sorted.JobNumber((k-1)*4 + (1:4)); % 4 jobs per subplot
        mat_valloss=zeros(4,2000);
        for i = 1:4
            jobNumber = jobSubset(i);
            filename = sprintf('train_val_losses/%d_val_losses.csv', jobNumber);     
            if exist(filename, 'file')
                val_losses = readmatrix(filename);
                mat_valloss(i,:)=val_losses';
            else
                fprintf('Skipping Job %d: File not found.\n', jobNumber);
            end
            plot(ax, 1:size(mat_valloss,2), mat_valloss(i,:), 'Color', cell_color{i}, 'LineWidth', lw);
            if k==1
                legend('No Feature Engineering','Concatenation','Reciprocals vs. time',...
                    'Mutual reciprocals', 'NumColumns', 1,'fontsize',20);    %legend('noFE','catonly','twithreci','fullreci', 'NumColumns', 2);
            end
        end
    
        xlim([0 2000]);
        set(gca,'fontsize',fs);
        if k==1
            ylabel('Validation loss with ReLU','fontsize',fs_label);
        elseif k==5
            ylabel('Validation loss with (tanh(x)+1)/2','fontsize',fs_label);
        end
        if k<=4
            title(titles{k},'fontsize',fs_title);     
        else
            xlabel('Epoch number','fontsize',fs_label);
        end
        insetPos = get(ax, 'Position');
    
        if k==1
            insetAx = axes('Position', [insetPos(1) - 0.035, insetPos(2) + 0.15, insetPos(3) * 0.725, insetPos(4) * 0.25], 'Parent', gcf);
            hold(insetAx, 'on'); box(insetAx, 'on');
        elseif k<=4
            insetAx = axes('Position', [insetPos(1) - 0.035, insetPos(2) + 0.19, insetPos(3) * 1.3, insetPos(4) * 0.5], 'Parent', gcf);
            hold(insetAx, 'on'); box(insetAx, 'on');
        elseif k>=5
            insetAx = axes('Position', [insetPos(1) - 0.035, insetPos(2) + 0.05, insetPos(3) * 1.3, insetPos(4) * 0.7], 'Parent', gcf);
            hold(insetAx, 'on'); box(insetAx, 'on');
        end
        % Plot zoomed-in version inside the inset
        for i=1:4
            plot(insetAx, 1:size(mat_valloss,2), mat_valloss(i,:), 'Color', cell_color{i}, 'LineWidth', 1.5);
        end
        ylim(insetAx, inset_ylim(k,:)); 
        xlim(insetAx, [1500 2000]); % Focus on later epochs
        set(insetAx, 'XTick', [1500,1750,2000]);%, 'YTick', []);
        set(insetAx,'fontsize',fs);
    end
    set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure 9.png');
 end


function fig10
    % --- Load & sort tables ---
    names = ["test_3D_124810kdata", "optm_3D_124810kdata", ...
             "optm_3D_500kdata",     "test_3D_500kdata"];
    for k = 1:numel(names)
        fn = fullfile("datatables", "dataTable_" + names(k) + ".csv");
        tbl{k} = sortrows(readtable(fn), {'ntrain','Activation','FeatureType'});
    end
    tbl124 = tbl(1:2);
    tbl500 = tbl{3};
    idx500 = tbl500.ntrain==500000 & tbl500.npara==6;
    feat500 = tbl500.FeatureType(idx500);
    act500  = tbl500.Activation(idx500);
    r2500   = tbl500.Mean_R2(idx500);
    
    % --- Settings ---
    fts      = {'fta_noFE','ftb_catonlytGIF','ftc_twithreciGIF','ftd_fullreci'};
    dispname = {'No Feature Engineering','Concatenation', ...
                'Reciprocals vs. time','Mutual reciprocals'};
    colors   = struct('fta_noFE','r','ftb_catonlytGIF','g', ...
                      'ftc_twithreciGIF','b','ftd_fullreci','k');
    acts     = {'relu','tanh01'};
    titles   = {'ReLU Activation','(tanh(x)+1)/2 Activation'};
    fs=35; ms=30; lw=2; gap=488000; xb=10000;
    
    % --- Precompute minima ---
    for i=1:2
      for j=1:2
        t = tbl124{i};
        mn(i,j) = min(t.Mean_R2(strcmp(t.Activation,acts{j})));
      end
    end
    
    % --- Plot with compact layout ---
    figure;
    tiledlayout(2,2,'Padding','compact','TileSpacing','compact');
    for i=1:2                     % test vs. optimized 124k
      t = tbl124{i};
      for j=1:2                   % relu vs. tanh
        ax = nexttile; hold(ax,'on');
        for f=1:4
          ft = fts{f};
          sel = strcmp(t.Activation,acts{j}) & strcmp(t.FeatureType,ft) & t.ntrain<=10000;
          plot(t.ntrain(sel),t.Mean_R2(sel),'-','Color',colors.(ft),'LineWidth',lw);
          plot(t.ntrain(sel),t.Mean_R2(sel),'.','Color',colors.(ft),'MarkerSize',ms,'HandleVisibility','off');
        end
        
        % broken-axis indicator (unchanged)
        m = mn(i,j); margin = (1-m)/10;
        ylim([m-margin,1]);
        px1=[10800,10900]; py=[m-1.5*margin, m-0.5*margin];
        px2=px1+100;
        plot(px1,py,'k','LineWidth',5,'Clipping','off');
        plot(px2,py,'k','LineWidth',5,'Clipping','off');
        fill([px1,flip(px2)],[py,flip(py)],'w','EdgeColor','none','Clipping','off');
        set(ax,'FontSize',fs);
    
        % 500k point & connector
        for k2 = find(strcmp(act500,acts{j}))'
          ft = feat500{k2}; y500 = r2500(k2);
          idx10 = find(t.ntrain==xb & strcmp(t.Activation,acts{j}) & strcmp(t.FeatureType,ft),1);
          y10 = t.Mean_R2(idx10);
          plot(500000-gap,y500,'.','Color',colors.(ft),'MarkerSize',28);
          plot([xb,500000-gap],[y10,y500],'--','Color',colors.(ft),'LineWidth',lw,'HandleVisibility','off');
        end
    
        if i==1, title(titles{j},'FontSize',fs); end
        if i==2, xlabel('$N_{\textrm{train}}$','Interpreter','latex','FontSize',fs); end
        if j==1, ylabel('mean $R^2$','Interpreter','latex'); end
        if i==1 && j==1
          legend(dispname,'Location','south','FontSize',29);
        end
        grid on; box on;
        xticks([1000,2000,4000,8000,xb,500000-gap]);
        xticklabels({'1k','2k','4k','8k','10k','500k'});
        hold(ax,'off');
      end
    end
    
    % --- Save at 600 DPI PNG and as EPS ---
    set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure 10.png');
     

end

 

function fig11
    % --- Load & sort tables ---
    dataTable_test_2D_124810kdata  = sortrows( ...
        readtable('datatables/dataTable_test_2D_124810kdata.csv'), ...
        {'ntrain','Activation','FeatureType'},'ascend');
    dataTable_optm_2D_124810kdata  = sortrows( ...
        readtable('datatables/dataTable_optm_2D_124810kdata.csv'), ...
        {'ntrain','Activation','FeatureType'},'ascend');
    dataTable_test_2D_500kdata     = sortrows( ...
        readtable('datatables/dataTable_test_2D_500kdata.csv'), ...
        {'ntrain','Activation','FeatureType'},'ascend');
    dataTable_optm_2D_500kdata     = sortrows( ...
        readtable('datatables/dataTable_optm_2D_500kdata.csv'), ...
        {'ntrain','Activation','FeatureType'},'ascend');
    
    % --- Feature styles & 500k data ---
    fts             = {'fta_noFE','ftb_catonlytGIF','ftc_twithreciGIF','ftd_fullreci'};
    dispname        = {'No Feature Engineering','Concatenation','Reciprocals vs. time','Mutual reciprocals'};
    colorMap        = containers.Map(fts, {'r','g','b','k'});
    feature_500k    = dataTable_optm_2D_500kdata.FeatureType;
    activation_500k = dataTable_optm_2D_500kdata.Activation;
    meanR2_500k     = dataTable_optm_2D_500kdata.Mean_R2;
    
    % --- Plot ---
    figure;
    tiledlayout(2,2,'Padding','compact','TileSpacing','compact');
    fs = 35; ms = 30; lw = 2; break_gap = 488000; xb = 10000;

    for plotIdx = 1:2
        % select test vs optimized
        if plotIdx==1
            dataTable = dataTable_test_2D_124810kdata;
        else
            dataTable = dataTable_optm_2D_124810kdata;
        end
        ntrain    = dataTable.ntrain;
        ftType    = dataTable.FeatureType;
        act       = dataTable.Activation;
        meanR2    = dataTable.Mean_R2;
        minR2_relu= min(meanR2(strcmp(act,'relu')));
        minR2_tanh= min(meanR2(strcmp(act,'tanh01')));
        
        % --- ReLU subplot ---
        ax1 = nexttile; hold(ax1,'on');
        for f = 1:numel(fts)
            sel = strcmp(act,'relu') & strcmp(ftType,fts{f}) & ntrain<=10000;
            plot(ntrain(sel), meanR2(sel), '-', 'Color', colorMap(fts{f}), 'LineWidth', lw);
            plot(ntrain(sel), meanR2(sel), '.', 'Color', colorMap(fts{f}), 'MarkerSize', ms, 'HandleVisibility','off');
        end
        % broken-axis indicator
        m = minR2_relu; margin = (1-m)/10;
        ylim([m-margin,1]);
        px1=[10800,10900]; py=[m-1.5*margin, m-0.5*margin]; px2=px1+100;
        plot(px1,py,'k','LineWidth',5,'Clipping','off');
        plot(px2,py,'k','LineWidth',5,'Clipping','off');
        fill([px1,flip(px2)],[py,flip(py)],'w','EdgeColor','none','Clipping','off');
        set(ax1,'FontSize',fs);
        % 500k points & connectors
        idxR = strcmp(activation_500k,'relu');
        for j = find(idxR)'
            ft = feature_500k{j};
            idx10 = find(ntrain==xb & strcmp(act,'relu') & strcmp(ftType,ft),1);
            y10 = meanR2(idx10);
            y500= meanR2_500k(j);
            plot([xb,500000-break_gap],[y10,y500],'--','Color',colorMap(ft),'LineWidth',lw,'HandleVisibility','off');
            plot(500000-break_gap,y500,'.','Color',colorMap(ft),'MarkerSize',ms,'LineWidth',2);
        end
        title('ReLU Activation','FontSize',fs);
        if plotIdx==2, xlabel('$N_{\textrm{train}}$','Interpreter','latex','FontSize',fs); end
        ylabel('mean $R^2$','Interpreter','latex','FontSize',fs);
        % correct x-ticks
        xticks([1000,2000,4000,8000,10000,500000-break_gap]);
        xticklabels({'1k','2k','4k','8k','10k','500k'});
        grid on; box on; hold(ax1,'off');
        
        % --- tanh subplot ---
        ax2 = nexttile; hold(ax2,'on');
        for f = 1:numel(fts)
            sel = strcmp(act,'tanh01') & strcmp(ftType,fts{f}) & ntrain<=10000;
            plot(ntrain(sel), meanR2(sel), '-', 'Color', colorMap(fts{f}), 'LineWidth', lw);
            plot(ntrain(sel), meanR2(sel), '.', 'Color', colorMap(fts{f}), 'MarkerSize', ms, 'HandleVisibility','off');
        end
        m = minR2_tanh; margin = (1-m)/10;
        ylim([m-margin,1]);
        px1=[10800,10900]; py=[m-1.5*margin, m-0.5*margin]; px2=px1+100;
        plot(px1,py,'k','LineWidth',5,'Clipping','off');
        plot(px2,py,'k','LineWidth',5,'Clipping','off');
        fill([px1,flip(px2)],[py,flip(py)],'w','EdgeColor','none','Clipping','off');
        set(ax2,'FontSize',fs);
        idxT = strcmp(activation_500k,'tanh01');
        for j = find(idxT)'
            ft = feature_500k{j};
            idx10 = find(ntrain==xb & strcmp(act,'tanh01') & strcmp(ftType,ft),1);
            y10 = meanR2(idx10);
            y500= meanR2_500k(j);
            plot([xb,500000-break_gap],[y10,y500],'--','Color',colorMap(ft),'LineWidth',lw,'HandleVisibility','off');
            plot(500000-break_gap,y500,'.','Color',colorMap(ft),'MarkerSize',ms,'LineWidth',2);
        end
        title('(tanh(x)+1)/2 Activation','FontSize',fs);
        if plotIdx==2, xlabel('$N_{\textrm{train}}$','Interpreter','latex','FontSize',fs); end
        % legend on second subplot (first row) with vertical layout
        if plotIdx==1
            legend(dispname,'Location','southeast','FontSize',29,'NumColumns',1);
        end
        % correct x-ticks for tanh subplot
        xticks([1000,2000,4000,8000,10000,500000-break_gap]);
        xticklabels({'1k','2k','4k','8k','10k','500k'});
        grid on; box on; hold(ax2,'off');
        
        
    end
    set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure 11.png');


end

function figS1
    FFAdata = importdata('25FSIGT_FFA.csv');    
    t_vec22=[22,24,25,27,30,40,50,60,70,80,90,100,120,140,160,180] ;
    chosensubjs=[1:2,4:10,12:17,19:24];
    figure;
     lw=3;ms=30;fs=30;
     for k=1:25
         if k==3
             plot(t_vec22,FFAdata(k,:),'-','color',[150 75 0]./255,'linewidth',lw);hold on
            plot(t_vec22,FFAdata(k,:),'.','color',[150 75 0]./255,'MarkerSize',ms);hold on
         elseif ismember(k,chosensubjs)==1
            plot(t_vec22,FFAdata(k,:),'r-','linewidth',lw);hold on
            plot(t_vec22,FFAdata(k,:),'r.','MarkerSize',ms);hold on    
         else
            plot(t_vec22,FFAdata(k,:),'k-','linewidth',lw);hold on
            plot(t_vec22,FFAdata(k,:),'k.','MarkerSize',ms);hold on    
         end
     end
     set(gca,'fontsize',fs);
         set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure S1.png');
end




  function figS2S3
    gludata = importdata('25FSIGT_Glu.csv');
    FFAdata = importdata('25FSIGT_FFA.csv');     
    t_vec22=[22,24,25,27,30,40,50,60,70,80,90,100,120,140,160,180] ;
    optmG=importdata('GFX3D25_optmG.csv');
    optmF=importdata('GFX3D25_optmF.csv');
    figure;tiledlayout(5,5);lw1=5;lw2=4;ms=30;fs=30;
    
    for k=1 : 25
        nexttile;
        if ismember(k,[3,11,18,25])~=1
            plot(t_vec22,FFAdata(k,:),'r-','LineWidth',lw1);hold on;
            plot(t_vec22,FFAdata(k,:),'r.','markersize',ms);hold on;
            plot(t_vec22,optmF(k,:),'b-','LineWidth',lw2);hold on;
        %     plot(t_vec22,reconsFfromoptm(k,:),'g-');hold on;
            if k<=20
                xticks([]);
            else
                xticks([22 100 180]);
            end
            xlim([15 185]);
            minv=min(FFAdata(k,:));
            maxv=max(FFAdata(k,:));
            v1=max(floor((minv - 20) / 10) * 10,0);
            v3=ceil((maxv + 20) / 10) * 10;
            v2=(v1+v3)/2;
            yticks([v1,v2,v3]);%round(minv-20),round(0.5*(minv+maxv)),round(maxv+20)]);
            ylim([v1,v3]);
            text(0.15, 0.7, sprintf('%d', k), 'Units', 'normalized', ...
            'VerticalAlignment', 'bottom', 'HorizontalAlignment', 'right', 'FontSize', fs, 'FontWeight', 'bold');
            
        else
            xticks([]);yticks([]);
        end
        box 'on'
        set(gca,'fontsize',30);%title(sprintf('Subject %d',k),'FontSize',20);
    end
    set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure S3.png');

    figure;
    tiledlayout(5,5);
    for k=1 : 25
        nexttile;
        if ismember(k,[3,11,18,25])~=1
            plot(t_vec22,gludata(k,:),'r-','LineWidth',lw1);hold on;
            plot(t_vec22,gludata(k,:),'r.','markersize',ms);hold on;
            plot(t_vec22,optmG(k,:),'b-','LineWidth',lw2);hold on;
            %     plot(t_vec22,reconsFfromoptm(k,:),'g-');hold on;
            if k<=20
                xticks([]);
            else
                xticks([22 100 180]);
            end
            xlim([15 185]);
            
            if mod(k,5)~=1
                yticks([]);
            end
            ylim([50 200]);
            text(0.95, 0.65, sprintf('%d', k), 'Units', 'normalized', ...
            'VerticalAlignment', 'bottom', 'HorizontalAlignment', 'right', 'FontSize', fs, 'FontWeight', 'bold');
        else
            yticks([]);xticks([]);
        end
        box 'on'
        set(gca,'fontsize',30);%title(sprintf('Subject %d',k),'FontSize',20);
    end
        set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure S2.png');

end

function figS4
    ste_struct=importdata('StefanovskiSameT.csv');
    ste_mat=ste_struct.data;
    options = odeset('RelTol', 1e-12, 'AbsTol', 1e-12);
    SteDataI=zeros(25,28);SteDataG=zeros(25,28);SteDataF=zeros(25,28);
    for j=1:25
        SteDataG(j,:)=ste_mat(1+28*(j-1):28*j,3)';
        SteDataI(j,:)=ste_mat(1+28*(j-1):28*j,4)';
        SteDataF(j,:)=1000.*ste_mat(1+28*(j-1):28*j,5)';
    end
    Para2=importdata('prepare_fig3_optmpara_2Dmodel.csv');
    t_vec22=[22,24,25,27,30,40,50,60,70,80,90,100,120,140,160,180] ;
    tbefore22=[0, 2, 3, 4, 5, 6, 8, 10, 12, 14, 16, 19, 22];
    t_vec0to180=[tbefore22,t_vec22(2:end)];

    figure;tiledlayout(5,5);lw1=5;ms=30;lw2=4;fs=30;
    for k=1:25
        nexttile;
        if ismember(k,[3,11,18,25])~=1
            newins=SteDataI(k,:);newglu=SteDataG(k,:);
            glufcn= @(t) interp1( t_vec0to180,newglu, t, 'linear', 'extrap');
            insfcn= @(t) interp1( t_vec0to180,newins, t, 'linear', 'extrap');
            plot(t_vec0to180,SteDataF(k,:),'r.','Markersize',ms);hold on
            plot(t_vec0to180,SteDataF(k,:),'r-','linewidth',lw1);hold on
            params=Para2(k,1:5);
            fb=params(5);
            ib=newins(1);
            fx0=[fb,0]';
            [~,xt2]=ode45(@(t,x) rhs_FX2D_LIP(t, x, params,ib, glufcn, insfcn),t_vec0to180,fx0,options);
            plot(t_vec0to180,xt2(:,1),'-','color','b','linewidth',lw2);hold on;
            if k<=20
                xticks([]);
            else
                xticks([0 90 180]);
            end
            xlim([0 185]);
            
            minv=min(SteDataF(k,:));
            maxv=max(SteDataF(k,:));
            v1=max(floor((minv - 50) / 10) * 10,0);
            v3=ceil((maxv + 50) / 10) * 10;
            v2=(v1+v3)/2;
            yticks([v1,v2,v3]);%round(minv-20),round(0.5*(minv+maxv)),round(maxv+20)]);
            ylim([v1,v3]);

            text(0.95, 0.05, sprintf('%d', k), 'Units', 'normalized', ...
             'VerticalAlignment', 'bottom', 'HorizontalAlignment', 'right', 'FontSize', fs, 'FontWeight', 'bold');
        else
            yticks([]);xticks([]);
        end
        box 'on'
        set(gca,'fontsize',30);%title(sprintf('Subject %d',k),'FontSize',20);
    end
    set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure S4.png');
end


function figS5

% load your data
%     aa = importdata('In241106_GFX3D25_errbardec_2060005_first100k.csv');
aa=importdata('prepare_fig2_parameterset3DdecF_mvlgnmDirect_first10kdata_of3930694.csv');
    all6para = importdata('GFX3DoptmRelGluFFAsimult_25FSIGT_fromdenoiseFFA_01_to_25.csv');
    gludata   = importdata('25FSIGT_Glu.csv');
    FFAdata   = importdata('25FSIGT_FFA.csv');
    GIF0      = importdata('25FSIGT_GIF0.csv');
    
    % build usedaa
    alloptmpara       = zeros(25,11);
    alloptmpara(:,1:6)   = all6para;
    alloptmpara(:,7:9)   = GIF0;
    alloptmpara(:,10)    = gludata(:,1);
    alloptmpara(:,11)    = FFAdata(:,1);
    chosensubj       = [1:2,4:10,12:17,19:24];
    usedaa           = alloptmpara(chosensubj,[1:7,9:11]);
    
    % correlation matrices
    corr_matrix1 = corr(usedaa);
    corr_matrix2 = corr(aa(1:10000,1:10));
    
    % create figure with compact two‐panel layout
    figure;
    tl = tiledlayout(1,2,'TileSpacing','compact','Padding','compact');
    
    % panel 1
    ax1 = nexttile(tl);
    imagesc(corr_matrix1);
    colormap(jet);            % same colormap for both
    title('Optimized parameters','FontSize',14,'Interpreter','latex');
    xlabel('Parameters','FontSize',12,'Interpreter','latex');
    ylabel('Parameters','FontSize',12,'Interpreter','latex');
    xticks(1:10); yticks(1:10);
    labels = {'$S_I$','$C_X$','$S_G$','$X_2$','$C_F$','$L_2$','$G_b$','$F_b$','$G_{22}$','$F_{22}$'};
    xticklabels(labels); yticklabels(labels);
    set(ax1,'TickLabelInterpreter','latex','FontSize',30);
%     axis equal;
    
    % panel 2
    ax2 = nexttile(tl);
    imagesc(corr_matrix2);
    title('Generated parameter samples','FontSize',14,'Interpreter','latex');
    xlabel('Parameters','FontSize',12,'Interpreter','latex');
    ylabel('Parameters','FontSize',12,'Interpreter','latex');
    xticks(1:10); yticks(1:10);
    xticklabels(labels); yticklabels(labels);
    set(ax2,'TickLabelInterpreter','latex','FontSize',30);
%     axis equal;
    
    % shared colorbar on the right
    cb = colorbar;
    cb.Layout.Tile = 'east';
    cb.Label.String      = 'Correlation Coefficient';
    cb.Label.FontSize    = 30;
    cb.Label.Interpreter = 'latex';
        set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure S5.png'); 

end

  

 function figS6
    usedaa = importdata('prepare_fig3_optmpara_2Dmodel.csv');
    aa     = importdata('prepare_fig3_parameterset2D_mvlgnmDirectparaphybd_first10kdata_of2877269.csv');
    
    corr_matrix1 = corr(usedaa);
    corr_matrix2 = corr(aa(1:10000,:));
    
    figure;
    tl = tiledlayout(1,2,'Padding','compact','TileSpacing','compact');
    
    % First tile
    ax1 = nexttile;
    imagesc(corr_matrix1);
    colormap(jet);
    title('Optimized parameters', 'FontSize', 14, 'Interpreter', 'latex');
    xlabel('Parameters', 'FontSize', 12, 'Interpreter', 'latex');
    ylabel('Parameters', 'FontSize', 12, 'Interpreter', 'latex');
    xticks(1:10); yticks(1:10);
    xticklabels({'$S_{GF}$','$P_{X\alpha}$','$S_{Fb}$','$P_X$','$F_b$'});
    yticklabels({'$S_{GF}$','$P_{X\alpha}$','$S_{Fb}$','$P_X$','$F_b$'});
    set(ax1, 'TickLabelInterpreter', 'latex', 'FontSize', 30);
    
    % Second tile
    ax2 = nexttile;
    imagesc(corr_matrix2);
    title('Generated parameter samples', 'FontSize', 14, 'Interpreter', 'latex');
    xlabel('Parameters', 'FontSize', 12, 'Interpreter', 'latex');
    ylabel('Parameters', 'FontSize', 12, 'Interpreter', 'latex');
    xticks(1:10); yticks(1:10);
    xticklabels({'$S_{GF}$','$P_{X\alpha}$','$S_{Fb}$','$P_X$','$F_b$'});
    yticklabels({'$S_{GF}$','$P_{X\alpha}$','$S_{Fb}$','$P_X$','$F_b$'});
    set(ax2, 'TickLabelInterpreter', 'latex', 'FontSize', 30);
    
    % Shared colorbar spanning both tiles
    cb = colorbar;           % create colorbar
    cb.Layout.Tile = 'east'; % place it on the east side of the layout
    cb.Label.String       = 'Correlation Coefficient';
    cb.Label.FontSize     = 30;
    cb.Label.Interpreter  = 'latex';

    set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure S6.png'); 

 end

 function figS8S9

    options = odeset('RelTol',1e-12,'AbsTol',1e-12);
    FSIGTNsubj = 25;
    
    gludata           = importdata('25FSIGT_Glu.csv');
    FFAdata           = importdata('25FSIGT_FFA.csv');
    insdata_after22   = importdata('25FSIGT_Ins.csv');
    insbefore22       = importdata('Insbefore22_25FSIGT.csv');
    insdata           = [insbefore22,insdata_after22(:,2:end)];
    GIF0              = importdata('25FSIGT_GIF0.csv');
    
    tindex    = 13:28;
    t_vec22   = [22,24,25,27,30,40,50,60,70,80,90,100,120,140,160,180];
    tbefore22 = [0,2,3,4,5,6,8,10,12,14,16,19,22];
    t_vec0to180 = [tbefore22,t_vec22(2:end)];
    
    all6para       = importdata('GFX3DoptmRelGluFFAsimult_25FSIGT_fromdenoiseFFA_01_to_25.csv');
    alloptmpara    = zeros(25,11);
    alloptmpara(:,1:6) = all6para;
    alloptmpara(:,7:9) = GIF0;
    alloptmpara(:,10)  = gludata(:,1);
    alloptmpara(:,11)  = FFAdata(:,1);
    
    ste_struct = importdata('StefanovskiSameT.csv');
    ste_mat    = ste_struct.data;
    experiGall = reshape(ste_mat(:,3),28,25)';
    experiIall = reshape(ste_mat(:,4),28,25)';
    experiFall = 1000*reshape(ste_mat(:,5),28,25)';
    
    experiG = experiGall(:,tindex);
    experiI = experiIall(:,tindex);
    experiF = experiFall(:,tindex);
    
    usedsubj = [1:2,4:10,12:17,19:24];
    optmG    = importdata('GFX3D25_optmG.csv');
    optmF    = importdata('GFX3D25_optmF.csv');
    
    reconsGfromoptm = zeros(FSIGTNsubj,16);
    reconsFfromoptm = zeros(FSIGTNsubj,16);
    
    paraoptm_noIb = alloptmpara(:,[1:7,9:11]);
    Jobnumber     = 25011504;
    
    parainferfromoptm = importdata(sprintf('parainferfromoptm_Mvlognormaldirect_%d.csv',Jobnumber));
    
    for K = 1:25
        parainfer = parainferfromoptm;
        newinsall  = insdata(K,:);
        insfcn0    = @(t) interp1(t_vec0to180,newinsall,t,'linear','extrap');
        ib         = newinsall(1);
        cx         = parainfer(K,2);
        rhs_x      = @(t,x) cx*(max(insfcn0(t)-ib,0)-x);
        [~,xfwd]   = ode45(rhs_x,[0 22],0,options);
        xt22       = xfwd(end);
    
        if size(parainfer,2)==6
            params = [parainfer(K,1:6),0,paraoptm_noIb(K,7),ib,paraoptm_noIb(K,8)];
            gfx22   = [paraoptm_noIb(K,[9,10]),xt22]';
        elseif size(parainfer,2)==8
            params = [parainfer(K,1:6),0,parainfer(K,7),ib,parainfer(K,8)];
            gfx22   = [paraoptm_noIb(K,[9,10]),xt22]';
        else
            params = [parainfer(K,1:6),0,parainfer(K,7),ib,parainfer(K,8)];
            gfx22   = [parainfer(K,[9,10]),xt22]';
        end
    
        newins22 = insdata(K,tindex);
        insfcn22 = @(t) interp1(t_vec22,newins22,t,'linear','extrap');
        [~,xt_infer] = ode45(@(t,x) rhs_GFX_noI2(t,x,params,insfcn22),t_vec22,gfx22,options);
    
        reconsGfromoptm(K,:) = xt_infer(:,1)';
        reconsFfromoptm(K,:) = xt_infer(:,2)';
    end
    
    figure;%%% Plot Fig S8
    lw = 5; fs = 20;
    tiledlayout(5,5);
    for k = 1:25
        ax = nexttile; hold(ax,'on');
        if ismember(k,usedsubj)
            plot(t_vec22,optmG(k,:),'-','color','b','LineWidth',2*lw);
            plot(t_vec22,reconsGfromoptm(k,:),'color','g','LineWidth',lw);
        else
            yticks([]);
        end
        xticks([]); box on; set(gca,'FontSize',fs);
        text(0.95,0.05,sprintf('%d',k),'Units','normalized', ...
             'VerticalAlignment','bottom','HorizontalAlignment','right', ...
             'FontSize',fs,'FontWeight','bold');
    end
    set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure S8.png');


    figure;%%% Plot Fig S9
    tiledlayout(5,5);
    for k = 1:25
        ax = nexttile; hold(ax,'on');
        if ismember(k,usedsubj)
            plot(t_vec22,optmF(k,:),'-','color','b','LineWidth',2*lw);
            plot(t_vec22,reconsFfromoptm(k,:),'color','g','LineWidth',lw);
        else
            yticks([]);
        end
        xticks([]); box on; set(gca,'FontSize',fs);
        text(0.95,0.05,sprintf('%d',k),'Units','normalized', ...
             'VerticalAlignment','bottom','HorizontalAlignment','right', ...
             'FontSize',fs,'FontWeight','bold');
    end
    set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure S9.png');

end



function figS10S11
    % --- Load & sort tables ---
    dataTable_test_3D_124810kdata = sortrows( ...
        readtable('datatables/dataTable_test_3D_124810kdata.csv'), ...
        {'ntrain','Activation','FeatureType'},'ascend');
    dataTable_optm_3D_124810kdata = sortrows( ...
        readtable('datatables/dataTable_optm_3D_124810kdata.csv'), ...
        {'ntrain','Activation','FeatureType'},'ascend');
    dataTable_test_3D_500kdata = readtable('datatables/dataTable_test_3D_500kdata.csv');
    dataTable_optm_3D_500kdata = readtable('datatables/dataTable_optm_3D_500kdata.csv');
    
    % --- Extract 500k tanh01 only, npara==6 ---
    idx_500k_test = dataTable_test_3D_500kdata.ntrain==500000 & ...
                    dataTable_test_3D_500kdata.npara==6 & ...
                    strcmp(dataTable_test_3D_500kdata.Activation,'tanh01');
    idx_500k_optm = dataTable_optm_3D_500kdata.ntrain==500000 & ...
                    dataTable_optm_3D_500kdata.npara==6 & ...
                    strcmp(dataTable_optm_3D_500kdata.Activation,'tanh01');
    feature_500k_test = dataTable_test_3D_500kdata.FeatureType(idx_500k_test);
    feature_500k_optm = dataTable_optm_3D_500kdata.FeatureType(idx_500k_optm);
    
    % --- R² column names & titles ---
    R2_params_test = {'R2_SI','R2_CX','R2_SG','R2_X2','R2_CF','R2_L2'};
    R2_params_optm = {'R2true_SI','R2true_CX','R2true_SG','R2true_X2','R2true_CF','R2true_L2'};
    clean_titles   = {'$S_I$','$C_X$','$S_G$','$X_2$','$C_F$','$L_2$'};
    
    % --- Feature styles ---
    fts      = {'fta_noFE','ftb_catonlytGIF','ftc_twithreciGIF','ftd_fullreci'};
    dispname = {'No Feature Engineering','Concatenation', ...
                'Reciprocals vs. time','Mutual reciprocals'};
    colorMap = containers.Map(fts, {'r','g','b','k'});
    
    % --- Loop over test vs. optimized ---
    for figIdx = 1:2
        if figIdx==1
            dataTable   = dataTable_test_3D_124810kdata;
            dataTable500= dataTable_test_3D_500kdata;
            idx500      = idx_500k_test;
            feat500     = feature_500k_test;
            R2_params   = R2_params_test;
            fig_title   = 'Testing Data (tanh)';
        else
            dataTable   = dataTable_optm_3D_124810kdata;
            dataTable500= dataTable_optm_3D_500kdata;
            idx500      = idx_500k_optm;
            feat500     = feature_500k_optm;
            R2_params   = R2_params_optm;
            fig_title   = 'Optimized Data (tanh)';
        end
    
        % --- Figure & layout ---
        figure;
        tiledlayout(2,3,'Padding','compact','TileSpacing','compact');
        fs = 25; ms = 30; lw = 2; break_gap = 488000; xb = 10000;
        ntrain     = dataTable.ntrain;
        featureType= dataTable.FeatureType;
        activation = dataTable.Activation;
    
        % --- Six parameters ---
        for p = 1:6
            ax = nexttile; hold(ax,'on');
            meanR2_p = dataTable.(R2_params{p});
            m = min(meanR2_p(strcmp(activation,'tanh01')));
            % plot curves ≤10k
            for f = 1:numel(fts)
                ft = fts{f};
                sel = strcmp(activation,'tanh01') & strcmp(featureType,ft) & ntrain<=10000;
                plot(ntrain(sel), meanR2_p(sel), '-', 'Color', colorMap(ft), 'LineWidth', lw);
                plot(ntrain(sel), meanR2_p(sel), '.', 'Color', colorMap(ft), 'MarkerSize', ms, 'HandleVisibility','off');
            end
            % broken axis
            margin = (1-m)/10;
            ylim([m-margin,1]);
            px1=[10800,10900]; py=[m-1.5*margin, m-0.5*margin];
            px2=px1+100;
            plot(px1,py,'k','LineWidth',5,'Clipping','off');
            plot(px2,py,'k','LineWidth',5,'Clipping','off');
            fill([px1,flip(px2)],[py,flip(py)],'w','EdgeColor','none','Clipping','off');
            set(ax,'FontSize',fs);
    
            % 500k points + connectors
            R2_500k = dataTable500.(R2_params{p})(idx500);
            for j = 1:numel(R2_500k)
                ft = feat500{j};
                idx10 = find(ntrain==xb & strcmp(activation,'tanh01') & strcmp(featureType,ft),1);
                y10 = meanR2_p(idx10);
                y500= R2_500k(j);
                plot([xb,500000-break_gap],[y10,y500],'--','Color',colorMap(ft),'LineWidth',lw,'HandleVisibility','off');
                plot(500000-break_gap, y500, '.', 'Color', colorMap(ft), 'MarkerSize', ms, 'LineWidth', 2);
            end
    
            % labels & limits
            title(clean_titles{p},'Interpreter','latex','FontSize',fs);
            if p>=4, xlabel('$N_{\textrm{train}}$','Interpreter','latex','FontSize',fs); end
            if ismember(p,[1,4]), ylabel('$R^2$','Interpreter','latex','FontSize',fs); end
            xticks([1000,2000,4000,8000,10000,500000-break_gap]);
            xticklabels({'1k','2k','4k','8k','10k','500k'});
            grid on; box on;
            hold(ax,'off');
            legendfontsize=[18,25];
            % legend on first subplot only
            if p==1
                legend(dispname,'Location','south','FontSize',legendfontsize(figIdx),'NumColumns',1);
            end
        end
        set(gcf,'PaperPositionMode','auto');
        if figIdx==1
            print(gcf,'-dpng','-r600','Figure S10.png');
        elseif figIdx==2
            print(gcf,'-dpng','-r600','Figure S11.png');
        end
    end
    
     

end

function figS12S13

    % --- Load & sort tables ---
tbl124_test = sortrows( ...
    readtable('datatables/dataTable_test_2D_124810kdata.csv'), ...
    {'ntrain','Activation','FeatureType'}, 'ascend');
tbl124_opt  = sortrows( ...
    readtable('datatables/dataTable_optm_2D_124810kdata.csv'), ...
    {'ntrain','Activation','FeatureType'}, 'ascend');
tbl500_test = sortrows( ...
    readtable('datatables/dataTable_test_2D_500kdata.csv'), ...
    {'ntrain','Activation','FeatureType'}, 'ascend');
tbl500_opt  = sortrows( ...
    readtable('datatables/dataTable_optm_2D_500kdata.csv'), ...
    {'ntrain','Activation','FeatureType'}, 'ascend');

% --- Common settings ---
fts        = {'fta_noFE','ftb_catonlytGIF','ftc_twithreciGIF','ftd_fullreci'};
dispname   = {'No Feature Engineering','Concatenation', ...
              'Reciprocals vs. time','Mutual reciprocals'};
colorMap   = containers.Map(fts, {'r','g','b','k'});
clean_titles = {'$S_{GF}$','$P_{X\alpha}$','$S_{Fb}$','$P_X$','$F_b$'};
params124 = {'Sfal','Pxa','Sffb','PXFCR','Fb'};
params500 = {'R2_Sfal','R2_Pxa','R2_Sffb','R2_PXFCR','R2_Fb'};
break_gap = 488000;
xb        = 10000;
fs = 25; ms = 30; lw = 2;

% --- Extract 500k tanh01 indices & features ---
idx500_test = tbl500_test.ntrain==500000 & strcmp(tbl500_test.Activation,'tanh01');
idx500_opt  = tbl500_opt.ntrain==500000  & strcmp(tbl500_opt.Activation,'tanh01');
f500_test   = tbl500_test.FeatureType(idx500_test);
f500_opt    = tbl500_opt.FeatureType(idx500_opt);
r500_test   = tbl500_test.R2_Sfal(idx500_test);    % placeholder, will index per param
r500_opt    = tbl500_opt.R2_Sfal(idx500_opt);

% --- Loop over Test vs Optimized ---
for figIdx = 1:2
    if figIdx==1
        tbl124   = tbl124_test;
        tbl500   = tbl500_test;
        idx500   = idx500_test;
        f500     = f500_test;
        r500_all = tbl500_test;
        fname    = 'Figure S12.png';
    else
        tbl124   = tbl124_opt;
        tbl500   = tbl500_opt;
        idx500   = idx500_opt;
        f500     = f500_opt;
        r500_all = tbl500_opt;
        fname    = 'Figure S13.png';
    end

    % --- Start figure ---
    figure;
    tiledlayout(2,3,'Padding','compact','TileSpacing','compact');
    ntrain  = tbl124.ntrain;
    act     = tbl124.Activation;
    fType   = tbl124.FeatureType;

    for p = 1:5
        ax = nexttile; hold(ax,'on');
        y124 = tbl124.(params124{p});
        m   = min(y124(strcmp(act,'tanh01')));
        % plot ≤10k curves
        for f = 1:numel(fts)
            sel = strcmp(act,'tanh01') & strcmp(fType,fts{f}) & ntrain<=10000;
            plot(ntrain(sel), y124(sel), '-', 'Color', colorMap(fts{f}), 'LineWidth', lw);
            plot(ntrain(sel), y124(sel), '.', 'Color', colorMap(fts{f}), 'MarkerSize', ms, 'HandleVisibility','off');
        end
        % broken axis
        margin = (1-m)/10;
        ylim([m-margin,1]);
        px1=[10800,10900]; py=[m-1.5*margin, m-0.5*margin]; px2=px1+100;
        plot(px1,py,'k','LineWidth',5,'Clipping','off');
        plot(px2,py,'k','LineWidth',5,'Clipping','off');
        fill([px1,flip(px2)],[py,flip(py)],'w','EdgeColor','none','Clipping','off');
        set(ax,'FontSize',fs);

        % plot 500k points & connectors for this param
        y500 = r500_all.(params500{p})(idx500);
        [~, uidx] = unique(f500,'stable');
        for j = 1:numel(uidx)
            ft = f500{uidx(j)};
            yj = y500(uidx(j));
            idx10 = find(ntrain==xb & strcmp(act,'tanh01') & strcmp(fType,ft),1);
            y10   = y124(idx10);
            plot([xb,500000-break_gap],[y10,yj],'--','Color',colorMap(ft),'LineWidth',lw,'HandleVisibility','off');
            plot(500000-break_gap,yj,'.','Color',colorMap(ft),'MarkerSize',ms,'LineWidth',2);
        end

        % labels
        title(clean_titles{p},'Interpreter','latex','FontSize',fs);
        if p>=3, xlabel('$N_{\textrm{train}}$','Interpreter','latex','FontSize',fs); end
        if ismember(p,[1,4]), ylabel('$R^2$','Interpreter','latex','FontSize',fs); end
        xticks([1000,2000,4000,8000,10000,500000-break_gap]);
        xticklabels({'1k','2k','4k','8k','10k','500k'});
        grid on; box on; hold(ax,'off');

        % legend only once
        if p==1
            loc = 'south';
            if figIdx==2, loc='north'; end
            legend(dispname,'Location',loc,'Orientation','horizontal', ...
                   'FontSize',20,'NumColumns',1);
        end
    end

    % --- Save PNG ---
    set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600',fname);
end



end

function figS14   
    t_vec22=[22, 24, 25, 27, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 160, 180];
    FFAdata = importdata('25FSIGT_FFA.csv');denoiseFFA=importdata('FCdenoised_FFA.csv');
    figure;tiledlayout(5,5);ms=40;lw1=5;lw2=4;fs=30;
        for k=1:25
            nexttile;
            if ismember(k,[3,11,18,25])~=1
                plot(t_vec22,FFAdata(k,:),'r.','MarkerSize',ms);hold on;
                plot(t_vec22,FFAdata(k,:),'r-','LineWidth',lw1);hold on;
                plot(t_vec22,denoiseFFA(k,:),'k-','LineWidth',lw2);hold on;
                text(0.95, 0.05, sprintf('%d', k), 'Units', 'normalized', ...
                     'VerticalAlignment', 'bottom', 'HorizontalAlignment', 'right', 'FontSize', fs, 'FontWeight', 'bold');
                if k<=20
                    xticks([]);
                else
                    xticks([22 100 180]);
                end
 
                xlim([15 185]);
                minv=min(FFAdata(k,:));
                maxv=max(FFAdata(k,:));
                v1=max(floor((minv - 20) / 10) * 10,0);
                v3=ceil((maxv + 20) / 10) * 10;
                v2=(v1+v3)/2;
                yticks([v1,v2,v3]);
                ylim([v1,v3]);
            else
                xticks([]);
                yticks([]);
            end
            box 'on'
            set(gca,'FontSize',fs);
        end
    set(gcf,'PaperPositionMode','auto');
    print(gcf,'-dpng','-r600','Figure S14.png');
 end




function fig_24110603train
    Ntrainshow=5000;
    paratrain=importdata('paratrain_24110603.csv');
    parainfertrain=importdata('parainfertrain_24110603.csv');
    paratest=importdata('paratest_24110603.csv');
    parainfertest=importdata('parainfertest_24110603.csv');
    fs=30;ms=30;lw=2;
    
    columnNames={'$S_I$','$C_X$','$S_G$','$X_2$','$C_F$','$L_2$','$G_b$','$F_b$','$G_{22}$','$F_{22}$'};
     figure;tiledlayout(2,4);
        for k = 1:8

            y_true=paratrain(:,k);
            y_pred=parainfertrain(:,k);
            X = [ones(length(y_pred), 1), y_pred];  % Add a column of ones for the intercept
            [b, ~, ~, ~, stats] = regress(y_true, X);  % Perform linear regression
            p_train = stats(3);  % p-value for the regression model
            R2_train = stats(1);

            nexttile;hold on;
             plot(paratrain(1:Ntrainshow,k),parainfertrain(1:Ntrainshow,k),'b.');hold on;
            min_val = min(paratrain(1:Ntrainshow, k));
            max_val = max(paratrain(1:Ntrainshow, k));
            plot([min_val, max_val], [min_val, max_val], 'k--','linewidth',3);
            xlim([min_val max_val]);
            ylim([min_val max_val]);

            title(sprintf('%s',columnNames{k}),'fontsize',fs,'Interpreter','latex');box 'on';,  %.3f
      
            text(max_val - 0.05 * (max_val - min_val), min_val + 0.05 * (max_val - min_val), ...
                    sprintf('$R^2$ = %.3f', R2_train), ...
                    'HorizontalAlignment', 'right', 'VerticalAlignment', 'bottom', ...
                    'FontSize', fs - 5, 'Interpreter', 'latex', 'EdgeColor', 'black', ...
                    'BackgroundColor', 'white', 'Margin', 5);
 
                
                %    $R^2$ value: 
            %     title(sprintf('%s    p-value: %.3f, %.3f;\n R2-value: %.3f, %.3f',columnNames{k}, p_train,p_real,R2_train,  R2_real));box 'on';
            xlabel('True');
            ylabel('Inferred');
            set(gca,'fontsize',fs-5);
            hold off;
        end


end

function fig_24110603test
    Ntrainshow=5000;
    paratrain=importdata('paratrain_24110603.csv');
    parainfertrain=importdata('parainfertrain_24110603.csv');
    paratest=importdata('paratest_24110603.csv');
    parainfertest=importdata('parainfertest_24110603.csv');
    fs=30;ms=30;lw=2;
    
    columnNames={'$S_I$','$C_X$','$S_G$','$X_2$','$C_F$','$L_2$','$G_b$','$F_b$','$G_{22}$','$F_{22}$'};
     figure;tiledlayout(2,4);
 



        for k = 1:8

            y_true=paratest(:,k);
            y_pred=parainfertest(:,k);
            X = [ones(length(y_pred), 1), y_pred];  % Add a column of ones for the intercept
            [b, ~, ~, ~, stats] = regress(y_true, X);  % Perform linear regression
            p_train = stats(3);  % p-value for the regression model
            R2_train = stats(1);


            nexttile;hold on;
            plot(paratest(1:Ntrainshow,k),parainfertest(1:Ntrainshow,k),'b.');hold on;
            min_val = min(paratrain(1:Ntrainshow, k));
            max_val = max(paratrain(1:Ntrainshow, k));
            plot([min_val, max_val], [min_val, max_val], 'k--','linewidth',3);
            xlim([min_val max_val]);
            ylim([min_val max_val]);

            title(sprintf('%s',columnNames{k}),'fontsize',fs,'Interpreter','latex');box 'on';,  %.3f
      
            text(max_val - 0.05 * (max_val - min_val), min_val + 0.05 * (max_val - min_val), ...
            sprintf('$R^2$ = %.3f', R2_train), ...
            'HorizontalAlignment', 'right', 'VerticalAlignment', 'bottom', ...
            'FontSize', fs - 5, 'Interpreter', 'latex', 'EdgeColor', 'black', ...
            'BackgroundColor', 'white', 'Margin', 5);

            xlabel('True');
            ylabel('Inferred');
            set(gca,'fontsize',fs-5);
            hold off;


        end


end


 

 function fig_corrmap_4D

 aa=importdata('In250107_GFXY4D25_XminusY_errbar_1066458_noIb.csv');
 all6para=importdata('GFXY4DoptmRelGluFFAsimult_25FSIGT_XminusY_fromdenoiseFFA.csv');
 
%  all6para=importdata('GFX3Doptm75newFSIGT_computext22fromcx_240808.csv');
t_vec22=[22, 23, 24, 25, 27, 30, 40, 50, 60, 70, 80, 90, 100, 120, 150, 180];
tbefore22=[0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 22];
            gludata = importdata('25FSIGT_glu_alltime.csv');
            FFAdata = importdata('25FSIGT_FFA_alltime.csv');    
% insdata = importdata('allins_new75FSIGT.csv');
% insdata_after22=insdata(:,15:30);

GIF0=importdata('25FSIGT_GIF0.csv');
alloptmpara=zeros(25,13);
alloptmpara(:,1:8)=all6para;
alloptmpara(:,9:11)=GIF0;
alloptmpara(:,12)=gludata(:,1);
alloptmpara(:,13)=FFAdata(:,1);
usedaa=alloptmpara(:,[1:9,11:13]);

% Calculate the correlation matrices
    corr_matrix1 = corr(usedaa);  % First correlation matrix
    corr_matrix2 =  corr(aa(1:10000,:));                 % Second correlation matrix
    
    % Create a new figure
    figure;
    
    % First subplot
    subplot(1, 2, 1); % Create the first subplot
    imagesc(corr_matrix1); % Display the first correlation matrix
    colormap(jet); % Use the same colormap for both subplots
    title('Optimized parameters', 'FontSize', 14, 'Interpreter', 'latex');
    xlabel('Parameters', 'FontSize', 12, 'Interpreter', 'latex');
    ylabel('Parameters', 'FontSize', 12, 'Interpreter', 'latex');
    xticks(1:12);
    yticks(1:12);

    xticklabels({'$S_I$','$C_X$','$S_G$','$C_Y$','$X_2$','$C_F$','$L_2$','$yt_{22}$','$G_b$','$F_b$','G22','F22'});
    yticklabels({'$S_I$','$C_X$','$S_G$','$C_Y$','$X_2$','$C_F$','$L_2$','$yt_{22}$','$G_b$','$F_b$','G22','F22'});


%     xticklabels({'$S_I$', '$C_X$', '$S_G$', '$X_2$', '$C_F$', '$L_2$', '$G_b$','$F_b$','$G_{22}$','$F_{22}$'});
%     yticklabels({'$S_I$', '$C_X$', '$S_G$', '$X_2$', '$C_F$', '$L_2$', '$G_b$','$F_b$','$G_{22}$','$F_{22}$'});
    set(gca, 'TickLabelInterpreter', 'latex', 'FontSize', 30);
    axis equal;
    
    % Second subplot
    subplot(1, 2, 2); % Create the second subplot
    imagesc(corr_matrix2); % Display the second correlation matrix
    title('Generated parameter samples', 'FontSize', 14, 'Interpreter', 'latex');
    xlabel('Parameters', 'FontSize', 12, 'Interpreter', 'latex');
    ylabel('Parameters', 'FontSize', 12, 'Interpreter', 'latex');
    xticks(1:12);
    yticks(1:12);
        xticklabels({'$S_I$','$C_X$','$S_G$','$C_Y$','$X_2$','$C_F$','$L_2$','$yt_{22}$','$G_b$','$F_b$','G22','F22'});
    yticklabels({'$S_I$','$C_X$','$S_G$','$C_Y$','$X_2$','$C_F$','$L_2$','$yt_{22}$','$G_b$','$F_b$','G22','F22'});


%     xticklabels({'$S_I$', '$C_X$', '$S_G$', '$X_2$', '$C_F$', '$L_2$', '$G_b$','$F_b$','$G_{22}$','$F_{22}$'});
%     yticklabels({'$S_I$', '$C_X$', '$S_G$', '$X_2$', '$C_F$', '$L_2$', '$G_b$','$F_b$','$G_{22}$','$F_{22}$'});
    set(gca, 'TickLabelInterpreter', 'latex', 'FontSize', 30);
    axis equal;
    
    % Add a shared colorbar
    % Position the colorbar to span both subplots
    cb = colorbar('Position', [0.93 0.11 0.02 0.8]); % Adjust the position as needed
    cb.Label.String = 'Correlation Coefficient';
    cb.Label.FontSize = 14;
    cb.Label.Interpreter = 'latex';
    
    % Adjust the positions of the subplots to make space for the colorbar
%     subplot(1, 2, 1);
%     set(gca, 'Position', [0.1 0.1 0.35 0.8]); % Adjust subplot position for first plot
%     subplot(1, 2, 2);
%     set(gca, 'Position', [0.55 0.1 0.35 0.8]); % Adjust subplot position for second plot
%     
%     
     % Adjust the positions of the subplots to make them larger
subplot(1, 2, 1);
set(gca, 'Position', [0.05 0.1 0.4 0.8]); % Adjust subplot position for the first plot

subplot(1, 2, 2);
set(gca, 'Position', [0.55 0.1 0.4 0.8]); % Adjust subplot position for the second plot

% Adjust the colorbar position to fit with the new subplot layout
set(cb, 'Position', [0.96 0.1 0.02 0.8]); % Adjust colorbar position

   

 end





  function fig_24110603optm
    Ntrainshow=5000;
    paratrain=importdata('paratrain_24110603.csv');
    parainfertrain=importdata('parainfertrain_24110603.csv');
    paratest=importdata('paratest_24110603.csv');
    parainfertest=importdata('parainfertest_24110603.csv');


      gludata = importdata('25FSIGT_Glu.csv');
        FFAdata = importdata('25FSIGT_FFA.csv');    
        insdata_after22=importdata('25FSIGT_Ins.csv');
        insbefore22=importdata('Insbefore22_25FSIGT.csv');
        insdata =[insbefore22,insdata_after22(:,2:end)];
        GIF0 = importdata('25FSIGT_GIF0.csv');
            all6para=importdata('GFX3DoptmRelGluFFAsimult_25FSIGT_fromdenoiseFFA_01_to_25.csv');
        alloptmpara=zeros(25,11); 
        alloptmpara(:,1:6)=all6para;
        alloptmpara(:,7:9)=GIF0;
        alloptmpara(:,10)=gludata(:,1);
        alloptmpara(:,11)=FFAdata(:,1);
    
        alloptmpara_used=[alloptmpara(:,1:7),alloptmpara(:,9:11)];

parainferoptm=importdata('parainferfromoptm_Mvlognormal25_24110603.csv');
paratrue=alloptmpara_used(:,1:8);


    fs=30;ms=30;lw=2;
     chosensubjs=[1:2,4:10,12:17,19:24];


    columnNames={'$S_I$','$C_X$','$S_G$','$X_2$','$C_F$','$L_2$','$G_b$','$F_b$','$G_{22}$','$F_{22}$'};
     figure;tiledlayout(2,4);
 



        for k = 1:8

            y_true=paratest(:,k);
            y_pred=parainfertest(:,k);
            X = [ones(length(y_pred), 1), y_pred];  % Add a column of ones for the intercept
            [b, ~, ~, ~, stats] = regress(y_true, X);  % Perform linear regression
            p_test = stats(3);  % p-value for the regression model
            
            R2_test = stats(1);


            nexttile;hold on;
            plot(paratest(1:Ntrainshow,k),parainfertest(1:Ntrainshow,k),'b.');hold on;
            min_val = min(paratest(1:Ntrainshow, k));
            max_val = max(paratest(1:Ntrainshow, k));
            plot([min_val, max_val], [min_val, max_val], 'k--','linewidth',3);
            xlim([min_val max_val]);
            ylim([min_val max_val]);



            y_true=paratrue(chosensubjs,k);
            y_pred=parainferoptm(chosensubjs,k);
            plot(y_true,y_pred,'m.','Markersize',ms);hold on;

            X = [ones(length(y_pred), 1), y_pred];  % Add a column of ones for the intercept
            [b, ~, ~, ~, stats] = regress(y_true, X);  % Perform linear regression
            p_optm = stats(3);  % p-value for the regression model
%             disp(p_optm)
            R2_optm = stats(1);



            title(sprintf('%s',columnNames{k}),'fontsize',fs,'Interpreter','latex');box 'on';   %.3f
      
            text(min_val + 0.05 * (max_val - min_val),max_val - 0.05 * (max_val - min_val),  ...
            sprintf('Test: $R^2$ = %.4f\nOptm: $R^2$ = %.4f', R2_test,R2_optm), ...
            'HorizontalAlignment', 'left', 'VerticalAlignment', 'top', ...
            'FontSize', fs - 5, 'Interpreter', 'latex', 'EdgeColor', 'black', ...
            'BackgroundColor', 'white', 'Margin', 5);

             text(max_val - 0.05 * (max_val - min_val),min_val + 0.05 * (max_val - min_val),  ...
            sprintf('Test: $p$ = %.4f\nOptm: $p$ = %.4f', p_test,p_optm), ...
            'HorizontalAlignment', 'right', 'VerticalAlignment', 'bottom', ...
            'FontSize', fs - 5, 'Interpreter', 'latex', 'EdgeColor', 'black', ...
            'BackgroundColor', 'white', 'Margin', 5);


            xlabel('True');
            ylabel('Inferred');
            set(gca,'fontsize',fs-5);
            hold off;


        end


  end



function fig_24110603losscurve
    
    max_epochs=1000;
    ep_maxlr=500;
    max_lr=1e-3;
    % Define steep parameters
    steep1 = 10 / ep_maxlr;
    steep2 = 10 / max_epochs;
    
    % Initialize arrays to store epoch numbers and learning rates
    epochs = 1:max_epochs;
    lr_values = zeros(1, max_epochs);
    
    % Loop over all epochs and calculate the learning rate for each epoch
    for epoch = 1:max_epochs
        if epoch <= ep_maxlr
            constant1 = 1 + exp(-steep1 * (ep_maxlr / 2));
            lr1 = max_lr * constant1 / (1 + exp(-steep1 * (epoch - ep_maxlr / 2)));
            lr_values(epoch) = lr1;
        else
            constant2 = 1 + exp(-steep2 * (max_epochs * 3/4 - ep_maxlr));
            lr2 = max_lr * constant2 / (1 + exp(-steep2 * (max_epochs * 3/4 - epoch)));
            lr_values(epoch) = lr2;
        end
    end
    
    % Plot the learning rate curve
    figure;lw=3;fs=30;
    tiledlayout(1,2);
% 
    nexttile;
    plot(epochs, lr_values,'b-', 'LineWidth', 2);
%     title('Learning Rate Curve');
    xlabel('Epoch');
    ylabel('Learning Rate');
    set(gca,'fontsize',fs);
%     grid on;
% 
    nexttile;

    valloss=importdata('24110603_val_losses.csv');
    trainloss=importdata('24110603_train_losses.csv');

    l1=length(trainloss);
    plot(1:1:l1,trainloss,'r-','linewidth',lw+3);hold on;
    plot(1:1:l1,valloss,'b-','linewidth',lw);hold on;
    xlabel('Epoch');
    ylabel('Loss');
    legend('training loss','validation loss');
    axis([0 1000 0 0.01]);
    set(gca,'fontsize',fs);
%     grid on;

end

 


 



  function fig_3Dlosscurve_10kdata
% Get list of .ckpt files in the current folder
fileList = dir('*.ckpt');
numFiles = length(fileList);

% Initialize cell array to store extracted data
dataMatrix = cell(numFiles, 6);

for i = 1:numFiles
    filename = fileList(i).name;
    
    % Extract 8-digit job number (starting with 250203 or 250131)
    jobNumMatch = regexp(filename, '_(250205\d{3})_', 'tokens');
    if ~isempty(jobNumMatch)
        dataMatrix{i,1} = str2double(jobNumMatch{1}{1});
    else
        dataMatrix{i,1} = NaN; % If no match, assign NaN
    end
    
    % Determine if it is 2D or 3D
    if contains(filename, 'FX2DNN')
        dataMatrix{i,2} = '2D';
    elseif contains(filename, 'GFX3DNN')
        dataMatrix{i,2} = '3D';
    else
        dataMatrix{i,2} = 'Unknown';
    end
    
    % Extract npara value
    nparaMatch = regexp(filename, '_npara(\d+)_', 'tokens');
    if ~isempty(nparaMatch)
        dataMatrix{i,3} = str2double(nparaMatch{1}{1});
    else
        dataMatrix{i,3} = NaN;
    end
    
    % Extract feature type (noFE, catonlytGIF, twithreciGIF, or fullreci)
    if contains(filename, 'noFE')
        dataMatrix{i,4} = 'fta_noFE';
    elseif contains(filename, 'catonlytGIF')
        dataMatrix{i,4} = 'ftb_catonlytGIF';
    elseif contains(filename, 'twithreciGIF')
        dataMatrix{i,4} = 'ftc_twithreciGIF';
    elseif contains(filename, 'fullreci')
        dataMatrix{i,4} = 'ftd_fullreci';
    else
        dataMatrix{i,4} = 'Unknown';
    end
    
    % Extract activation function (relu or tanh01)
    if contains(filename, '_relu_')
        dataMatrix{i,5} = 'relu';
    elseif contains(filename, '_tanh01_')
        dataMatrix{i,5} = 'tanh01';
    else
        dataMatrix{i,5} = 'Unknown';
    end
    
    % Extract val_loss value
%     valLossMatch = regexp(filename, '-val_loss=([\d\.]+)', 'tokens');
    valLossMatch = regexp(filename, '-val_loss=([0-9]*\.?[0-9]+)', 'tokens');

    if ~isempty(valLossMatch)
        dataMatrix{i,6} = str2double(valLossMatch{1}{1});
    else
        dataMatrix{i,6} = NaN;
    end
end

% Convert cell array to table and display results
columnNames = {'JobNumber', 'Dimension', 'npara', 'FeatureType', 'Activation', 'ValLoss'};
dataTable_10kdata = cell2table(dataMatrix, 'VariableNames', columnNames);

% Sort dataTable based on multiple columns in ascending order
dataTable_10kdata = sortrows(dataTable_10kdata, {'JobNumber', 'Dimension', 'npara', 'FeatureType', 'Activation'});
 

        jobNumbers = 250205001:250205024;
        
        % Define colors for feature types (explicitly ordered)
        % colorMap = containers.Map({'fta_noFE', 'ftb_catonlytGIF', 'ftc_twithreciGIF','ftd_fullreci'}, {'r', 'g', 'b','k'});
        
        % Sort dataTable_used in the order: npara -> activation -> FeatureType
        sortOrder = [ "Activation", "npara","FeatureType"]; % Sorting criteria
        dataTable_sorted = sortrows(dataTable_used(1:24,:), sortOrder, 'ascend');
        
        % Ensure there are exactly 24 jobs
        if height(dataTable_sorted) ~= 24
            error("dataTable_sorted does not have exactly 24 rows!");
        end
        
        % Create figure
        figure;
        fs = 25;lw=2;
        cell_color= {'r', 'g', 'b','k'};
        inset_ylim=1e-3.*[0.8 1.2;0.85 1.2;0.8 1.1;0.6 0.8;0.7 0.95;0.6 0.8];
        
        
        % Iterate through 6 subplots (each containing 4 job numbers)
        for k = 1:6
            % Select subplot
            ax = subplot(2,3,k);
            hold(ax, 'on'); box(ax, 'on');
            
            % Extract the 4 job numbers for this subplot
            jobSubset = dataTable_sorted.JobNumber((k-1)*4 + (1:4)); % 4 jobs per subplot
            mat_valloss=zeros(4,2000);
        
            % Iterate through the 4 jobs in the order: noFE, catonlytGIF, twithreciGIF, fullreci
            for i = 1:4
                jobNumber = jobSubset(i);
                filename = sprintf('%d_val_losses.csv', jobNumber);
                % Check if file exists
                if exist(filename, 'file')
                    val_losses = readmatrix(filename);
                    mat_valloss(i,:)=val_losses';
                else
                    fprintf('Skipping Job %d: File not found.\n', jobNumber);
                end
        
                plot(ax, 1:size(mat_valloss,2), mat_valloss(i,:), 'Color', cell_color{i}, 'LineWidth', lw);
                if k==3
        %             legend('noFE','catonly','twithreci','fullreci', 'NumColumns', 2);
                    legend('No Feature Engineering','Concatenation','Reciprocals vs. time',...
                        'Mutual reciprocals', 'NumColumns', 2,'fontsize',15);
                end
            end
            
            % Set x-limits
            xlim([0 2000]);
        
            set(gca,'fontsize',fs);
            if k==1
                ylabel('Validation loss with ReLU');
            elseif k==4
                ylabel('Validation loss with (tanh(x)+1)/2');
            end
        
            if k==1
                title('Npara=6');
            elseif k==2
                title('Npara=8');
            elseif k==3
                title('Npara=10');
            end
        
        
        
            if k>=4
                xlabel('Epoch number');
            end
            insetPos = get(ax, 'Position');
        
            if k==3
                insetAx = axes('Position', [insetPos(1) + 0.065, insetPos(2) + 0.125, insetPos(3) * 0.6, insetPos(4) * 0.25], 'Parent', gcf);
                hold(insetAx, 'on'); box(insetAx, 'on');
            else
                insetAx = axes('Position', [insetPos(1) + 0.065, insetPos(2) + 0.15, insetPos(3) * 0.6, insetPos(4) * 0.4], 'Parent', gcf);
                hold(insetAx, 'on'); box(insetAx, 'on');
            end
        
            % Plot zoomed-in version inside the inset
            for i=1:4
                plot(insetAx, 1:size(mat_valloss,2), mat_valloss(i,:), 'Color', cell_color{i}, 'LineWidth', 1.5);
            end
         
                ylim(insetAx, inset_ylim(k,:)); 
                xlim(insetAx, [1500 2000]); % Focus on later epochs
                set(insetAx, 'XTick', [1500,1750,2000]);%, 'YTick', []);
                set(insetAx,'fontsize',fs);
        end

  end



  function table_3DNNfeatures


      % Get list of .ckpt files in the current folder
    fileList = dir('*.ckpt');
    numFiles = length(fileList);
    
    % Initialize cell array to store extracted data
    dataMatrix = cell(numFiles, 6);
    
    for i = 1:numFiles
        filename = fileList(i).name;
        
        % Extract 8-digit job number (starting with 250203 or 250131)
        jobNumMatch = regexp(filename, '_(250203\d{2}|250131\d{2})_', 'tokens');
        if ~isempty(jobNumMatch)
            dataMatrix{i,1} = str2double(jobNumMatch{1}{1});
        else
            dataMatrix{i,1} = NaN; % If no match, assign NaN
        end
        
        % Determine if it is 2D or 3D
        if contains(filename, 'FX2DNN')
            dataMatrix{i,2} = '2D';
        elseif contains(filename, 'GFX3DNN')
            dataMatrix{i,2} = '3D';
        else
            dataMatrix{i,2} = 'Unknown';
        end
        
        % Extract npara value
%         nparaMatch = regexp(filename, '_npara(\d+)_', 'tokens');
%         if ~isempty(nparaMatch)
%             dataMatrix{i,3} = str2double(nparaMatch{1}{1});
%         else
%             dataMatrix{i,3} = NaN;
%         end
        if contains(filename, 'npara6')
            dataMatrix{i,4} = 'None';
        elseif contains(filename, 'npara8')
            dataMatrix{i,4} = '$G_b$ and $F_b$';
        elseif contains(filename, 'npara10')
            dataMatrix{i,4} = '$G_b$, $F_b$, $G_{22}$ and $F_{22}$';
        else
            dataMatrix{i,4} = 'Unknown';
        end
        
        
        % Extract feature type (noFE, catonlytGIF, twithreciGIF, or fullreci)
        if contains(filename, 'noFE')
            dataMatrix{i,4} = 'No FE';
        elseif contains(filename, 'catonlytGIF')
            dataMatrix{i,4} = 'Concatenation';
        elseif contains(filename, 'twithreciGIF')
            dataMatrix{i,4} = 'Reciprocals vs. time';
        elseif contains(filename, 'fullreci')
            dataMatrix{i,4} = 'Mutual Reciprocals';
        else
            dataMatrix{i,4} = 'Unknown';
        end
        
        % Extract activation function (relu or tanh01)
        if contains(filename, '_relu_')
            dataMatrix{i,5} = 'ReLU';
        elseif contains(filename, '_tanh01_')
            dataMatrix{i,5} = '(tanh(x)+1)/2';
        else
            dataMatrix{i,5} = 'Unknown';
        end
        
        % Extract val_loss value
    %     valLossMatch = regexp(filename, '-val_loss=([\d\.]+)', 'tokens');
        valLossMatch = regexp(filename, '-val_loss=([0-9]*\.?[0-9]+)', 'tokens');
    
        if ~isempty(valLossMatch)
            dataMatrix{i,6} = str2double(valLossMatch{1}{1});
        else
            dataMatrix{i,6} = NaN;
        end
    end
    
    % Convert cell array to table and display results
    columnNames = {'JobNumber', 'Dimension', 'npara', 'FeatureType', 'Activation', 'ValLoss'};
    dataTable = cell2table(dataMatrix, 'VariableNames', columnNames);
    
    % Sort dataTable based on multiple columns in ascending order
    dataTable = sortrows(dataTable, {'JobNumber', 'Dimension', 'npara', 'FeatureType', 'Activation'});
     
    dataTable=dataTable(1:35,:);
    
    dataTable_3D=dataTable(17:34,:);
    dataTable_2D=dataTable(1:16,:);


  end



  function dataTable3D_10kdata

  % Get list of .ckpt files in the current folder
fileList = dir('*.ckpt');
numFiles = length(fileList);

% Initialize cell array to store extracted data
dataMatrix = cell(numFiles, 6);

for i = 1:numFiles
    filename = fileList(i).name;
    
    % Extract 8-digit job number (starting with 250203 or 250131)
    jobNumMatch = regexp(filename, '_(250205\d{3})_', 'tokens');
    if ~isempty(jobNumMatch)
        dataMatrix{i,1} = str2double(jobNumMatch{1}{1});
    else
        dataMatrix{i,1} = NaN; % If no match, assign NaN
    end
    
    % Determine if it is 2D or 3D
%     if contains(filename, 'FX2DNN')
%         dataMatrix{i,2} = '2D';
%     elseif contains(filename, 'GFX3DNN')
%         dataMatrix{i,2} = '3D';
%     else
%         dataMatrix{i,2} = 'Unknown';
%     end
    
    % Extract npara value
%     nparaMatch = regexp(filename, '_npara(\d+)_', 'tokens');
%     if ~isempty(nparaMatch)
%         dataMatrix{i,3} = str2double(nparaMatch{1}{1});
%     else
%         dataMatrix{i,3} = NaN;
%     end
    if contains(filename, 'npara6')
        dataMatrix{i,2} = '$\times$';
        dataMatrix{i,3} = '$\times$';
    elseif contains(filename, 'npara8')
        dataMatrix{i,2} = '$\times$';
        dataMatrix{i,3} = '$\checkmark$';
    elseif contains(filename, 'npara10')
        dataMatrix{i,2} = '$\checkmark$';
        dataMatrix{i,3} = '$\checkmark$';
    else
        dataMatrix{i,2} = 'Unknown';
        dataMatrix{i,3} = 'Unknown';
    end

    
    % Extract feature type (noFE, catonlytGIF, twithreciGIF, or fullreci)
    if contains(filename, 'noFE')
        dataMatrix{i,4} = '1';%No FE';
    elseif contains(filename, 'catonlytGIF')
        dataMatrix{i,4} = '2';%'Concatenation';
    elseif contains(filename, 'twithreciGIF')
        dataMatrix{i,4} = '3';%'Reciprocals vs. time';
    elseif contains(filename, 'fullreci')
        dataMatrix{i,4} = '4';%'Mutual reciprocals';
    else
        dataMatrix{i,4} = 'Unknown';
    end
    
    % Extract activation function (relu or tanh01)
    if contains(filename, '_relu_')
        dataMatrix{i,5} = 'ReLU';
    elseif contains(filename, '_tanh01_')
        dataMatrix{i,5} = 'tanh01';
    else
        dataMatrix{i,5} = 'Unknown';
    end
    
    % Extract val_loss value
%     valLossMatch = regexp(filename, '-val_loss=([\d\.]+)', 'tokens');
    valLossMatch = regexp(filename, '-val_loss=([0-9]*\.?[0-9]+)', 'tokens');

    if ~isempty(valLossMatch)
        dataMatrix{i,6} = str2double(valLossMatch{1}{1});
    else
        dataMatrix{i,6} = NaN;
    end
end

columnNames = {'JobNumber', 'Inference of GbFb', 'Inference of G22F22', 'FeatureType', 'Activation', 'ValLoss'};
dataTable_10kdata = cell2table(dataMatrix, 'VariableNames', columnNames);
% 
% dataTable_10kdata.("Inference of GbFb") = categorical(dataTable_10kdata.("Inference of GbFb"));
% dataTable_10kdata.("Inference of G22F22") = categorical(dataTable_10kdata.("Inference of G22F22"));
dataTable_10kdata = sortrows(dataTable_10kdata, {'JobNumber', 'Inference of GbFb', 'Inference of G22F22', 'FeatureType', 'Activation'});

 
dataTable_3D_10kdata=dataTable_10kdata(1 :24,:);
dataTable_2D_10kdata=dataTable_10kdata(25:40,:);

dataTable_test_3D_10kdata=dataTable_3D_10kdata;
% Define column names for R2 values
R2_columnNames = {'$R^2(S_I)$', '$R^2(C_X)$', '$R^2(S_G)$', '$R^2(X_2)$', '$R^2(C_F)$', '$R^2(L_2)$'};
numFiles = height(dataTable_test_3D_10kdata);  % Number of jobs

% Initialize an array to store R² values
R2_values = nan(numFiles, 6);  % 6 columns for 6 parameters

for i = 1:numFiles
    % Extract job number
    jobNumber = dataTable_test_3D_10kdata.JobNumber(i);
    
    % Construct file names based on job number
    paratest_file = sprintf('paratest_Mvlognormaldirect_%d.csv', jobNumber);
    parainfertest_file = sprintf('parainfertest_Mvlognormaldirect_%d.csv', jobNumber);
%     parainferfromoptm_file = sprintf('parainferfromoptm_Mvlognormaldirect_%d.csv', jobNumber);
    
    % Check if all files exist before proceeding
    if exist(paratest_file, 'file') && exist(parainfertest_file, 'file')% && exist(parainferfromoptm_file, 'file')
        % Load CSV data
        paratest = readmatrix(paratest_file);
        parainfertest = readmatrix(parainfertest_file);
        
        % Compute R² for the first 6 parameters
        for k = 1:6
            y_true = paratest(:, k);
            y_pred = parainfertest(:, k);
            
            % Perform linear regression
            X = [ones(length(y_pred), 1), y_pred];  % Add a column of ones for the intercept
            [b, ~, ~, ~, stats] = regress(y_true, X);
            
            % Store R² value
            R2_values(i, k) = stats(1);
        end
    else
        fprintf('Skipping Job %d: Missing one or more files.\n', jobNumber);
    end
end

% Convert R2 values to a table and merge with existing dataTable
R2_table = array2table(R2_values, 'VariableNames', R2_columnNames);
dataTable_test_3D_10kdata = [dataTable_test_3D_10kdata, R2_table];  % Append R2 values to the original table


dataTable_test_3D_10kdata.Mean_R2=mean(dataTable_test_3D_10kdata{:,7:12},2);




% Extract the table data
tableData = dataTable_test_3D_10kdata(:,2:13);

tableData=sortrows(tableData,'Mean_R2','descend');

% Open a file to save the LaTeX code
fid = fopen('latex_table3D_10kdata.tex', 'w');

% Begin LaTeX table
fprintf(fid, '\\begin{table}[h]\n');
fprintf(fid, '\\centering\n');
fprintf(fid, '\\begin{tabular}{|%s|}\n', repmat('c|', 1, width(tableData))); % Centered columns with vertical bars
fprintf(fid, '\\hline\n');

% Write column names as the header
headerNames = tableData.Properties.VariableNames;
fprintf(fid, ' %s \\\\\n', strjoin(headerNames, ' & '));
fprintf(fid, '\\hline\n');

% Identify the column(s) where validation loss values exist
valLossColumns = contains(headerNames, 'val_loss', 'IgnoreCase', true); % Adjust column name if necessary

% Write the data rows
for i = 1:height(tableData)
    rowData = tableData(i, :); % Extract row
    
    % Convert mixed data types to strings
    rowDataStr = strings(1, width(tableData)); % Initialize string array
    for j = 1:width(tableData)
        if isnumeric(rowData{1, j}) % If numeric, convert to string
            if valLossColumns(j) && rowData{1, j} < 0.001 % Apply scientific notation for small values
                rowDataStr(j) = sprintf('%.2e', rowData{1, j});
            elseif j>=6
                rowDataStr(j) = sprintf('%.3f', rowData{1, j});
            elseif j==5
                rowDataStr(j) = sprintf('%.4f', rowData{1, j});
            end
        else % If categorical or cell (text), convert to string directly
            rowDataStr(j) = string(rowData{1, j});
        end
    end

    % Join row elements with LaTeX column separator
    fprintf(fid, ' %s \\\\\n', strjoin(rowDataStr, ' & '));
    fprintf(fid, '\\hline\n');
end

% End LaTeX table
fprintf(fid, '\\end{tabular}\n');
fprintf(fid, '\\caption{Generated LaTeX table from MATLAB}\n');
fprintf(fid, '\\label{tab:my_table}\n');
fprintf(fid, '\\end{table}\n');

% Close the file
fclose(fid);

% Display message
disp('LaTeX table saved as latex_table_10kdata.tex');





  end



    function dataTable3D_test_10kdata

  % Get list of .ckpt files in the current folder
fileList = dir('*.ckpt');
numFiles = length(fileList);

% Initialize cell array to store extracted data
dataMatrix = cell(numFiles, 6);

for i = 1:numFiles
    filename = fileList(i).name;
    
    % Extract 8-digit job number (starting with 250203 or 250131)
    jobNumMatch = regexp(filename, '_(250205\d{3})_', 'tokens');
    if ~isempty(jobNumMatch)
        dataMatrix{i,1} = str2double(jobNumMatch{1}{1});
    else
        dataMatrix{i,1} = NaN; % If no match, assign NaN
    end
    
    % Determine if it is 2D or 3D
%     if contains(filename, 'FX2DNN')
%         dataMatrix{i,2} = '2D';
%     elseif contains(filename, 'GFX3DNN')
%         dataMatrix{i,2} = '3D';
%     else
%         dataMatrix{i,2} = 'Unknown';
%     end
    
    % Extract npara value
%     nparaMatch = regexp(filename, '_npara(\d+)_', 'tokens');
%     if ~isempty(nparaMatch)
%         dataMatrix{i,3} = str2double(nparaMatch{1}{1});
%     else
%         dataMatrix{i,3} = NaN;
%     end
    if contains(filename, 'npara6')
        dataMatrix{i,2} = '$\times$';
        dataMatrix{i,3} = '$\times$';
    elseif contains(filename, 'npara8')
        dataMatrix{i,2} = '$\times$';
        dataMatrix{i,3} = '$\checkmark$';
    elseif contains(filename, 'npara10')
        dataMatrix{i,2} = '$\checkmark$';
        dataMatrix{i,3} = '$\checkmark$';
    else
        dataMatrix{i,2} = 'Unknown';
        dataMatrix{i,3} = 'Unknown';
    end

    
    % Extract feature type (noFE, catonlytGIF, twithreciGIF, or fullreci)
    if contains(filename, 'noFE')
        dataMatrix{i,4} = '1';%No FE';
    elseif contains(filename, 'catonlytGIF')
        dataMatrix{i,4} = '2';%'Concatenation';
    elseif contains(filename, 'twithreciGIF')
        dataMatrix{i,4} = '3';%'Reciprocals vs. time';
    elseif contains(filename, 'fullreci')
        dataMatrix{i,4} = '4';%'Mutual reciprocals';
    else
        dataMatrix{i,4} = 'Unknown';
    end
    
    % Extract activation function (relu or tanh01)
    if contains(filename, '_relu_')
        dataMatrix{i,5} = 'ReLU';
    elseif contains(filename, '_tanh01_')
        dataMatrix{i,5} = 'tanh01';
    else
        dataMatrix{i,5} = 'Unknown';
    end
    
    % Extract val_loss value
%     valLossMatch = regexp(filename, '-val_loss=([\d\.]+)', 'tokens');
    valLossMatch = regexp(filename, '-val_loss=([0-9]*\.?[0-9]+)', 'tokens');

    if ~isempty(valLossMatch)
        dataMatrix{i,6} = str2double(valLossMatch{1}{1});
    else
        dataMatrix{i,6} = NaN;
    end
end

columnNames = {'JobNumber', 'Inference of GbFb', 'Inference of G22F22', 'FeatureType', 'Activation', 'ValLoss'};
dataTable_10kdata = cell2table(dataMatrix, 'VariableNames', columnNames);
% 
% dataTable_10kdata.("Inference of GbFb") = categorical(dataTable_10kdata.("Inference of GbFb"));
% dataTable_10kdata.("Inference of G22F22") = categorical(dataTable_10kdata.("Inference of G22F22"));
dataTable_10kdata = sortrows(dataTable_10kdata, {'JobNumber', 'Inference of GbFb', 'Inference of G22F22', 'FeatureType', 'Activation'});

 
dataTable_3D_10kdata=dataTable_10kdata(1 :24,:);
dataTable_2D_10kdata=dataTable_10kdata(25:40,:);

dataTable_test_3D_10kdata=dataTable_3D_10kdata;
% Define column names for R2 values
R2_columnNames = {'$R^2(S_I)$', '$R^2(C_X)$', '$R^2(S_G)$', '$R^2(X_2)$', '$R^2(C_F)$', '$R^2(L_2)$'};
numFiles = height(dataTable_test_3D_10kdata);  % Number of jobs

% Initialize an array to store R² values
R2_values = nan(numFiles, 6);  % 6 columns for 6 parameters

for i = 1:numFiles
    % Extract job number
    jobNumber = dataTable_test_3D_10kdata.JobNumber(i);
    
    % Construct file names based on job number
    paratest_file = sprintf('paratest_Mvlognormaldirect_%d.csv', jobNumber);
    parainfertest_file = sprintf('parainfertest_Mvlognormaldirect_%d.csv', jobNumber);
%     parainferfromoptm_file = sprintf('parainferfromoptm_Mvlognormaldirect_%d.csv', jobNumber);
    
    % Check if all files exist before proceeding
    if exist(paratest_file, 'file') && exist(parainfertest_file, 'file')% && exist(parainferfromoptm_file, 'file')
        % Load CSV data
        paratest = readmatrix(paratest_file);
        parainfertest = readmatrix(parainfertest_file);
        
        % Compute R² for the first 6 parameters
        for k = 1:6
            y_true = paratest(:, k);
            y_pred = parainfertest(:, k);
            
            % Perform linear regression
            X = [ones(length(y_pred), 1), y_pred];  % Add a column of ones for the intercept
            [b, ~, ~, ~, stats] = regress(y_true, X);
            
            % Store R² value
            R2_values(i, k) = stats(1);
        end
    else
        fprintf('Skipping Job %d: Missing one or more files.\n', jobNumber);
    end
end

% Convert R2 values to a table and merge with existing dataTable
R2_table = array2table(R2_values, 'VariableNames', R2_columnNames);
dataTable_test_3D_10kdata = [dataTable_test_3D_10kdata, R2_table];  % Append R2 values to the original table


dataTable_test_3D_10kdata.Mean_R2=mean(dataTable_test_3D_10kdata{:,7:12},2);




% Extract the table data
tableData = dataTable_test_3D_10kdata(:,2:13);

tableData=sortrows(tableData,'Mean_R2','descend');

% Open a file to save the LaTeX code
fid = fopen('latex_table3D_10kdata.tex', 'w');

% Begin LaTeX table
fprintf(fid, '\\begin{table}[h]\n');
fprintf(fid, '\\centering\n');
fprintf(fid, '\\begin{tabular}{|%s|}\n', repmat('c|', 1, width(tableData))); % Centered columns with vertical bars
fprintf(fid, '\\hline\n');

% Write column names as the header
headerNames = tableData.Properties.VariableNames;
fprintf(fid, ' %s \\\\\n', strjoin(headerNames, ' & '));
fprintf(fid, '\\hline\n');

% Identify the column(s) where validation loss values exist
valLossColumns = contains(headerNames, 'val_loss', 'IgnoreCase', true); % Adjust column name if necessary

% Write the data rows
for i = 1:height(tableData)
    rowData = tableData(i, :); % Extract row
    
    % Convert mixed data types to strings
    rowDataStr = strings(1, width(tableData)); % Initialize string array
    for j = 1:width(tableData)
        if isnumeric(rowData{1, j}) % If numeric, convert to string
            if valLossColumns(j) && rowData{1, j} < 0.001 % Apply scientific notation for small values
                rowDataStr(j) = sprintf('%.2e', rowData{1, j});
            elseif j>=6
                rowDataStr(j) = sprintf('%.3f', rowData{1, j});
            elseif j==5
                rowDataStr(j) = sprintf('%.4f', rowData{1, j});
            end
        else % If categorical or cell (text), convert to string directly
            rowDataStr(j) = string(rowData{1, j});
        end
    end

    % Join row elements with LaTeX column separator
    fprintf(fid, ' %s \\\\\n', strjoin(rowDataStr, ' & '));
    fprintf(fid, '\\hline\n');
end

% End LaTeX table
fprintf(fid, '\\end{tabular}\n');
fprintf(fid, '\\caption{Generated LaTeX table from MATLAB}\n');
fprintf(fid, '\\label{tab:my_table}\n');
fprintf(fid, '\\end{table}\n');

% Close the file
fclose(fid);

% Display message
disp('LaTeX table saved as latex_table_10kdata.tex');





    end



        function dataTable3D_optm_10kdata

  % Get list of .ckpt files in the current folder
fileList = dir('*.ckpt');
numFiles = length(fileList);

% Initialize cell array to store extracted data
dataMatrix = cell(numFiles, 6);

for i = 1:numFiles
    filename = fileList(i).name;
    
    % Extract 8-digit job number (starting with 250203 or 250131)
    jobNumMatch = regexp(filename, '_(250205\d{3})_', 'tokens');
    if ~isempty(jobNumMatch)
        dataMatrix{i,1} = str2double(jobNumMatch{1}{1});
    else
        dataMatrix{i,1} = NaN; % If no match, assign NaN
    end
    
    % Determine if it is 2D or 3D
%     if contains(filename, 'FX2DNN')
%         dataMatrix{i,2} = '2D';
%     elseif contains(filename, 'GFX3DNN')
%         dataMatrix{i,2} = '3D';
%     else
%         dataMatrix{i,2} = 'Unknown';
%     end
    
    % Extract npara value
%     nparaMatch = regexp(filename, '_npara(\d+)_', 'tokens');
%     if ~isempty(nparaMatch)
%         dataMatrix{i,3} = str2double(nparaMatch{1}{1});
%     else
%         dataMatrix{i,3} = NaN;
%     end
    if contains(filename, 'npara6')
        dataMatrix{i,2} = '$\times$';
        dataMatrix{i,3} = '$\times$';
    elseif contains(filename, 'npara8')
        dataMatrix{i,2} = '$\times$';
        dataMatrix{i,3} = '$\checkmark$';
    elseif contains(filename, 'npara10')
        dataMatrix{i,2} = '$\checkmark$';
        dataMatrix{i,3} = '$\checkmark$';
    else
        dataMatrix{i,2} = 'Unknown';
        dataMatrix{i,3} = 'Unknown';
    end

    
    % Extract feature type (noFE, catonlytGIF, twithreciGIF, or fullreci)
    if contains(filename, 'noFE')
        dataMatrix{i,4} = '1';%No FE';
    elseif contains(filename, 'catonlytGIF')
        dataMatrix{i,4} = '2';%'Concatenation';
    elseif contains(filename, 'twithreciGIF')
        dataMatrix{i,4} = '3';%'Reciprocals vs. time';
    elseif contains(filename, 'fullreci')
        dataMatrix{i,4} = '4';%'Mutual reciprocals';
    else
        dataMatrix{i,4} = 'Unknown';
    end
    
    % Extract activation function (relu or tanh01)
    if contains(filename, '_relu_')
        dataMatrix{i,5} = 'ReLU';
    elseif contains(filename, '_tanh01_')
        dataMatrix{i,5} = 'tanh01';
    else
        dataMatrix{i,5} = 'Unknown';
    end
    
    % Extract val_loss value
%     valLossMatch = regexp(filename, '-val_loss=([\d\.]+)', 'tokens');
    valLossMatch = regexp(filename, '-val_loss=([0-9]*\.?[0-9]+)', 'tokens');

    if ~isempty(valLossMatch)
        dataMatrix{i,6} = str2double(valLossMatch{1}{1});
    else
        dataMatrix{i,6} = NaN;
    end
end

columnNames = {'JobNumber', 'Inference of GbFb', 'Inference of G22F22', 'FeatureType', 'Activation', 'ValLoss'};
dataTable_10kdata = cell2table(dataMatrix, 'VariableNames', columnNames);
% 
% dataTable_10kdata.("Inference of GbFb") = categorical(dataTable_10kdata.("Inference of GbFb"));
% dataTable_10kdata.("Inference of G22F22") = categorical(dataTable_10kdata.("Inference of G22F22"));
dataTable_10kdata = sortrows(dataTable_10kdata, {'JobNumber', 'Inference of GbFb', 'Inference of G22F22', 'FeatureType', 'Activation'});

 
dataTable_3D_10kdata=dataTable_10kdata(1 :24,:);
dataTable_2D_10kdata=dataTable_10kdata(25:40,:);

dataTable_optm_3D_10kdata=dataTable_3D_10kdata;


% Define column names for R2 values
R2_true_vs_optm_ColumnNames = {'$R^2(S_I)$', '$R^2(C_X)$', '$R^2(S_G)$', '$R^2(X_2)$', '$R^2(C_F)$', '$R^2(L_2)$'};
numFiles = height(dataTable_optm_3D_10kdata);  % Number of jobs

gludata = importdata('25FSIGT_Glu.csv');
FFAdata = importdata('25FSIGT_FFA.csv');    
insdata_after22=importdata('25FSIGT_Ins.csv');
insbefore22=importdata('Insbefore22_25FSIGT.csv');
insdata =[insbefore22,insdata_after22(:,2:end)];

GIF0 = importdata('25FSIGT_GIF0.csv');
tindex=13:28;
t_vec22=[22,24,25,27,30,40,50,60,70,80,90,100,120,140,160,180] ;
tbefore22=[0, 2, 3, 4, 5, 6, 8, 10, 12, 14, 16, 19, 22];

all6para=importdata('GFX3DoptmRelGluFFAsimult_25FSIGT_fromdenoiseFFA_01_to_25.csv');
alloptmpara=zeros(25,10); 
alloptmpara(:,1:6)=all6para;
alloptmpara(:,7:8)=GIF0(:,[1,3]);
alloptmpara(:,9)=gludata(:,1);
alloptmpara(:,10)=FFAdata(:,1);

paratrue=alloptmpara(:,1:8);
chosensubjs=[1:2,4:10,12:17,19:24];


dataTable_optm_3D_10kdata=dataTable_3D_10kdata;


 
numFiles = height(dataTable_optm_3D_10kdata);  % Number of jobs

% Initialize an array to store R² values (paratrue vs parainferfromoptm)
R2_true_vs_optm = nan(numFiles, 6);  % 6 columns for 6 parameters

for i = 1:numFiles
    % Extract job number
    jobNumber = dataTable_optm_3D_10kdata.JobNumber(i);
    
    % Construct filename for parainferfromoptm
    parainferfromoptm_file = sprintf('parainferfromoptm_Mvlognormaldirect_%d.csv', jobNumber);
    
    % Check if the required file exists
    if exist(parainferfromoptm_file, 'file')
        % Load parainferfromoptm data
        parainferfromoptm = readmatrix(parainferfromoptm_file);
        
        


        % Filter paratrue to only include specific rows you provided
        % Assuming `paratrue_filtered` is defined outside this script
        y_true = paratrue(chosensubjs, 1:6);  % Take only first 6 columns
        y_pred = parainferfromoptm(chosensubjs, 1:6);  % Match rows with `paratrue_filtered`

        % Compute R² for the first 6 parameters
        for k = 1:6
            X = [ones(length(y_pred(:, k)), 1), y_pred(:, k)];  % Add a column of ones for the intercept
            [b, ~, ~, ~, stats] = regress(y_true(:, k), X);
            
            % Store R² value
            R2_true_vs_optm(i, k) = stats(1);
        end
    else
        fprintf('Skipping Job %d: Missing parainferfromoptm file.\n', jobNumber);
    end
end

% Convert new R2 values to a table and merge with existing dataTable
R2_true_vs_optm_table = array2table(R2_true_vs_optm, 'VariableNames', R2_true_vs_optm_ColumnNames);
dataTable_optm_3D_10kdata = [dataTable_optm_3D_10kdata, R2_true_vs_optm_table];  % Append new R2 values to the original table

dataTable_optm_3D_10kdata.Mean_R2=mean(dataTable_optm_3D_10kdata{:,7:12},2);


% Extract the table data
tableData = dataTable_optm_3D_10kdata(:,2:13);

tableData=sortrows(tableData,'Mean_R2','descend');

% Open a file to save the LaTeX code
fid = fopen('latex_table3D_optm_10kdata.tex', 'w');

% Begin LaTeX table
fprintf(fid, '\\begin{table}[h]\n');
fprintf(fid, '\\centering\n');
fprintf(fid, '\\begin{tabular}{|%s|}\n', repmat('c|', 1, width(tableData))); % Centered columns with vertical bars
fprintf(fid, '\\hline\n');

% Write column names as the header
headerNames = tableData.Properties.VariableNames;
fprintf(fid, ' %s \\\\\n', strjoin(headerNames, ' & '));
fprintf(fid, '\\hline\n');

% Identify the column(s) where validation loss values exist
valLossColumns = contains(headerNames, 'val_loss', 'IgnoreCase', true); % Adjust column name if necessary

% Write the data rows
for i = 1:height(tableData)
    rowData = tableData(i, :); % Extract row
    
    % Convert mixed data types to strings
    rowDataStr = strings(1, width(tableData)); % Initialize string array
    for j = 1:width(tableData)
        if isnumeric(rowData{1, j}) % If numeric, convert to string
            if valLossColumns(j) && rowData{1, j} < 0.001 % Apply scientific notation for small values
                rowDataStr(j) = sprintf('%.2e', rowData{1, j});
            elseif j>=6
                rowDataStr(j) = sprintf('%.3f', rowData{1, j});
            elseif j==5
                rowDataStr(j) = sprintf('%.4f', rowData{1, j});
            end
        else % If categorical or cell (text), convert to string directly
            rowDataStr(j) = string(rowData{1, j});
        end
    end

    % Join row elements with LaTeX column separator
    fprintf(fid, ' %s \\\\\n', strjoin(rowDataStr, ' & '));
    fprintf(fid, '\\hline\n');
end

% End LaTeX table
fprintf(fid, '\\end{tabular}\n');
fprintf(fid, '\\caption{Generated LaTeX table from MATLAB}\n');
fprintf(fid, '\\label{tab:my_table}\n');
fprintf(fid, '\\end{table}\n');

% Close the file
fclose(fid);

% Display message
disp('LaTeX table saved as latex_table_10kdata.tex');





        end


function fig_3Dinfer_meanR2

dataTable_test_3D_124810kdata = readtable('dataTable_test_3D_124810kdata.csv');
dataTable_optm_3D_124810kdata = readtable('dataTable_optm_3D_124810kdata.csv');
dataTable_optm_3D_500kdata = readtable('dataTable_optm_3D_500kdata.csv');
dataTable_test_3D_500kdata = readtable('dataTable_test_3D_500kdata.csv');

dataTable_test_3D_124810kdata=sortrows(dataTable_test_3D_124810kdata,{'ntrain', 'Activation', 'FeatureType'},'ascend');
dataTable_optm_3D_124810kdata=sortrows(dataTable_optm_3D_124810kdata,{'ntrain', 'Activation', 'FeatureType'},'ascend');
dataTable_test_3D_500kdata=sortrows(dataTable_test_3D_500kdata,{'ntrain', 'Activation', 'FeatureType'},'ascend');
dataTable_optm_3D_500kdata=sortrows(dataTable_optm_3D_500kdata,{'ntrain', 'Activation', 'FeatureType'},'ascend');


% Define feature types and colors
colorMap = containers.Map({'fta_noFE', 'ftb_catonlytGIF', 'ftc_twithreciGIF', 'ftd_fullreci'}, {'r', 'g', 'b', 'k'});
dispname = {'No Feature Engineering', 'Concatenation', 'Reciprocals vs. time', 'Mutual reciprocals'};

% Extract 500k data separately (only npara == 6)
idx_500k = (dataTable_optm_3D_500kdata.ntrain == 500000) & (dataTable_optm_3D_500kdata.npara == 6);
feature_500k = dataTable_optm_3D_500kdata.FeatureType(idx_500k);
activation_500k = dataTable_optm_3D_500kdata.Activation(idx_500k);
meanR2_500k = dataTable_optm_3D_500kdata.Mean_R2(idx_500k);

% Initialize figure
figure;fs=25;ms=30;
lw = 2;
break_gap = 488000; % Distance between last normal point (10k) and 500k in plotting

min_meanR2_values=zeros(4,1);

% Loop through both datasets (test and optm)
for plotIdx = 1:2
    if plotIdx == 1
        dataTable = dataTable_test_3D_124810kdata;
    else
        dataTable = dataTable_optm_3D_124810kdata;
    end
    
    % Extract relevant columns
    ntrain = dataTable.ntrain;
    featureType = dataTable.FeatureType;
    activation = dataTable.Activation;
    meanR2 = dataTable.Mean_R2;

    min_meanR2_relu = min(meanR2(strcmp(activation, 'relu')));
    min_meanR2_tanh = min(meanR2(strcmp(activation, 'tanh01')));

    % Store values for later reference
    min_meanR2_values(plotIdx * 2 - 1) = min_meanR2_relu;
    min_meanR2_values(plotIdx * 2) = min_meanR2_tanh;


    % Identify unique feature types
    unique_features = unique(featureType);
    
    % Plot ReLU activation (subplot 1 or 3)
    subplot(2, 2, plotIdx * 2 - 1);
    hold on;
    for i = 1:length(unique_features)
        idx = strcmp(activation, 'relu') & strcmp(featureType, unique_features{i});
        color = colorMap(unique_features{i});
        small_idx = idx & (ntrain <= 10000);
        plot(ntrain(small_idx), meanR2(small_idx), '-', 'DisplayName', dispname{i}, 'Color', color, 'LineWidth', lw);
        plot(ntrain(small_idx), meanR2(small_idx), '.', 'Color', color, 'MarkerSize', ms, 'HandleVisibility', 'off');
    end
    
    margin=(1-min_meanR2_relu)/10;
%     disp(margin);
    ylim([min_meanR2_relu-margin 1]);
    
    px1=[10800 10900];
    py=[min_meanR2_relu-1.5*margin, min_meanR2_relu-0.5*margin];
%     disp(py);
    height=100;px2=px1+height;
    h1=plot(px1,py,'k','LineWidth',5);hold all;h2=plot(px2,py,'k','LineWidth',5);hold all;
    hfill=fill([px1 flip(px2)],[py flip(py)],'w','EdgeColor','none');
    set(h1, 'Clipping', 'off');set(h2, 'Clipping', 'off');set(hfill, 'Clipping', 'off');
    set(gca,'fontsize',fs);


    % Plot 500k data point at a visually separate location
    idx_500k_relu = strcmp(activation_500k, 'relu');
    for j = 1:length(idx_500k_relu)
        if idx_500k_relu(j)
            color = colorMap(feature_500k{j});
            plot(500000 - break_gap, meanR2_500k(j), '.', 'Color', color, 'MarkerSize', 28, 'LineWidth', 2);
            idx_10k = find((ntrain == 10000) &  strcmp(activation, 'relu') & strcmp(featureType, feature_500k{j}), 1, 'first'); % Take the first match
            if ~isempty(idx_10k)
                meanR2_10k = meanR2(idx_10k); % Extract single value
                % Plot dashed line from 10k dot to 500k dot
                plot([10000, 500000 - break_gap], [meanR2_10k, meanR2_500k(j)], '--', 'Color', color, 'LineWidth', lw, 'HandleVisibility', 'off');
            end
        
        end
    end
    
    if plotIdx==1
        title('ReLU Activation','fontsize',fs);

    elseif plotIdx==2
        xlabel('$N_{\textrm{train}}$','interpreter','latex','fontsize',fs);
    end
    ylabel('mean $R^2$','Interpreter','latex','fontsize',fs);
    if plotIdx==1
        legend({'No Feature Engineering', 'Concatenation', 'Reciprocals vs. time', 'Mutual reciprocals'}, ...
           'Location', 'south', 'FontSize', 15);
    end
%     legend('Location', 'best','fontsize',15);
    grid on;box 'on';
    xticks([1000, 2000, 4000, 8000, 10000, 500000 - break_gap]);
    xticklabels({'1k', '2k', '4k', '8k', '10k', '500k'});
    hold off;
    
    % Plot tanh01 activation (subplot 2 or 4)
    subplot(2, 2, plotIdx * 2);
    hold on;
    for i = 1:length(unique_features)
        idx = strcmp(activation, 'tanh01') & strcmp(featureType, unique_features{i});
        color = colorMap(unique_features{i});
        
        small_idx = idx & (ntrain <= 10000);
        plot(ntrain(small_idx), meanR2(small_idx), '-', 'DisplayName', dispname{i}, 'Color', color, 'LineWidth', lw);
        plot(ntrain(small_idx), meanR2(small_idx), '.', 'Color', color, 'MarkerSize', ms, 'HandleVisibility', 'off');
    
    end

    margin=(1-min_meanR2_tanh)/10;
    ylim([min_meanR2_tanh-margin 1]);
    px1=[10800 10900];
    py=[min_meanR2_tanh-1.5*margin, min_meanR2_tanh-0.5*margin];
    height=100;px2=px1+height;
    h1=plot(px1,py,'k','LineWidth',5);hold all;h2=plot(px2,py,'k','LineWidth',5);hold all;
    hfill=fill([px1 flip(px2)],[py flip(py)],'w','EdgeColor','none');
    set(h1, 'Clipping', 'off');set(h2, 'Clipping', 'off');set(hfill, 'Clipping', 'off');
    set(gca,'fontsize',fs);

    idx_500k_tanh = strcmp(activation_500k, 'tanh01');
    for j = 1:length(idx_500k_tanh)
        if idx_500k_tanh(j)
            color = colorMap(feature_500k{j});
            plot(500000 - break_gap, meanR2_500k(j), '.', 'Color', color, 'MarkerSize', 28, 'LineWidth', 2);
            idx_10k = find((ntrain == 10000) &  strcmp(activation, 'tanh01') & strcmp(featureType, feature_500k{j}), 1, 'first'); % Take the first match
            if ~isempty(idx_10k)
                meanR2_10k = meanR2(idx_10k); % Extract single value
    
                
                % Plot dashed line from 10k dot to 500k dot
                plot([10000, 500000 - break_gap], [meanR2_10k, meanR2_500k(j)], '--', 'Color', color, 'LineWidth', lw, 'HandleVisibility', 'off');
            end

        end
    end
 
    
     
    if plotIdx==1
        title('(tanh(x)+1)/2 Activation','fontsize',fs);

    elseif plotIdx==2
        xlabel('$N_{\textrm{train}}$','interpreter','latex','fontsize',fs);
    end
%     legend({'No Feature Engineering', 'Concatenation', 'Reciprocals vs. time', 'Mutual reciprocals'}, ...
%        'Location', 'south', 'FontSize', 15);
    grid on;box 'on';
    xticks([1000, 2000, 4000, 8000, 10000, 500000 - break_gap]);
    xticklabels({'1k', '2k', '4k', '8k', '10k', '500k'});

    hold off;
end

end



function fig_3Dinfer_paraR2


    % Read and sort data
    dataTable_test_3D_124810kdata = readtable('dataTable_test_3D_124810kdata.csv');
    dataTable_optm_3D_124810kdata = readtable('dataTable_optm_3D_124810kdata.csv');
    dataTable_optm_3D_500kdata = readtable('dataTable_optm_3D_500kdata.csv');
    dataTable_test_3D_500kdata = readtable('dataTable_test_3D_500kdata.csv');
    
    dataTable_test_3D_124810kdata = sortrows(dataTable_test_3D_124810kdata, {'ntrain', 'Activation', 'FeatureType'}, 'ascend');
    dataTable_optm_3D_124810kdata = sortrows(dataTable_optm_3D_124810kdata, {'ntrain', 'Activation', 'FeatureType'}, 'ascend');
    
    % Extract 500k data separately (only for tanh activation and npara == 6)
    idx_500k_test = (dataTable_test_3D_500kdata.ntrain == 500000) & ...
                    (dataTable_test_3D_500kdata.npara == 6) & ...
                    strcmp(dataTable_test_3D_500kdata.Activation, 'tanh01');
    idx_500k_optm = (dataTable_optm_3D_500kdata.ntrain == 500000) & ...
                    (dataTable_optm_3D_500kdata.npara == 6) & ...
                    strcmp(dataTable_optm_3D_500kdata.Activation, 'tanh01');
    
    feature_500k_test = dataTable_test_3D_500kdata.FeatureType(idx_500k_test);
    feature_500k_optm = dataTable_optm_3D_500kdata.FeatureType(idx_500k_optm);
     
    % Define correct column names for each dataset
    R2_params_test = {'R2_SI', 'R2_CX', 'R2_SG', 'R2_X2', 'R2_CF', 'R2_L2'};
    R2_params_optm = {'R2true_SI', 'R2true_CX', 'R2true_SG', 'R2true_X2', 'R2true_CF', 'R2true_L2'};
    
    % Define clean titles for subplots
    clean_titles = {'$S_I$', '$C_X$', '$S_G$', '$X_2$', '$C_F$', '$L_2$'};
    
    % Define feature types and colors
    colorMap = containers.Map({'fta_noFE', 'ftb_catonlytGIF', 'ftc_twithreciGIF', 'ftd_fullreci'}, {'r', 'g', 'b', 'k'});
    dispname = {'No Feature Engineering', 'Concatenation', 'Reciprocals vs. time', 'Mutual reciprocals'};
    
    % Loop for both figures (1: test_3D, 2: optm_3D)
    for figIdx = 1:2
        if figIdx == 1
            dataTable = dataTable_test_3D_124810kdata;
            dataTable_500k = dataTable_test_3D_500kdata;
            idx_500k = idx_500k_test;
            feature_500k = feature_500k_test;
            R2_params = R2_params_test; % Use test data column names
            fig_title = 'Testing Data (tanh)';
        else
            dataTable = dataTable_optm_3D_124810kdata;
            dataTable_500k = dataTable_optm_3D_500kdata;
            idx_500k = idx_500k_optm;
            feature_500k = feature_500k_optm;
            R2_params = R2_params_optm; % Use optm data column names
            fig_title = 'Optimized Data (tanh)';
        end
        
        % Initialize figure
        figure;fs = 25;ms=30;lw = 2;
        break_gap = 488000;
    
        % Extract relevant columns
        ntrain = dataTable.ntrain;
        featureType = dataTable.FeatureType;
        activation = dataTable.Activation;
    
        % Loop through six parameters
        for paramIdx = 1:6
            subplot(2, 3, paramIdx);
            hold on;
    
            % Extract R2 values for the current parameter
            meanR2_param = dataTable.(R2_params{paramIdx});
            min_meanR2_param = min(meanR2_param(strcmp(activation, 'tanh01')));
    
            % Identify unique feature types
            unique_features = unique(featureType);
    
            % Plot curves for each feature type
            for i = 1:length(unique_features)
                idx = strcmp(activation, 'tanh01') & strcmp(featureType, unique_features{i});
                color = colorMap(unique_features{i});
                
                % Filter for small ntrain values (<=10k)
                small_idx = idx & (ntrain <= 10000);
                plot(ntrain(small_idx), meanR2_param(small_idx), '-', 'DisplayName', dispname{i}, 'Color', color, 'LineWidth', lw);
                plot(ntrain(small_idx), meanR2_param(small_idx), '.', 'Color', color, 'MarkerSize', ms, 'HandleVisibility', 'off');
            end
            
            % Set y-axis limits
            margin = (1 - min_meanR2_param) / 10;
            ylim([min_meanR2_param - margin, 1]);
    
            % Plot axis break "//"
            px1 = [10800 10900];
            py = [min_meanR2_param - 1.5 * margin, min_meanR2_param - 0.5 * margin];
            height = 100;
            px2 = px1 + height;
            h1 = plot(px1, py, 'k', 'LineWidth', 5);
            h2 = plot(px2, py, 'k', 'LineWidth', 5);
            hfill = fill([px1 flip(px2)], [py flip(py)], 'w', 'EdgeColor', 'none');
            set(h1, 'Clipping', 'off');set(h2, 'Clipping', 'off'); set(hfill, 'Clipping', 'off');
            set(gca,'fontsize',fs);
    
            % Plot 500k data points
    %         meanR2_500k_param = dataTable_500k.(R2_params{paramIdx})(idx_500k);
    %         for j = 1:length(meanR2_500k_param)
    %             color = colorMap(feature_500k{j});
    %             plot(500000 - break_gap, meanR2_500k_param(j), '.', 'Color', color, 'MarkerSize', 28, 'LineWidth', 2);
    %         end
            % Plot 500k data points with dashed line from 10k
        % Plot 500k data points and add dashed line from 10k to 500k
        meanR2_500k_param = dataTable_500k.(R2_params{paramIdx})(idx_500k);
        for j = 1:length(meanR2_500k_param)
            color = colorMap(feature_500k{j});
        
            % Find meanR2 at ntrain = 10k for the same feature type
            idx_10k = find((ntrain == 10000) & strcmp(activation, 'tanh01') & strcmp(featureType, feature_500k{j}), 1, 'first'); % Take first match
            if ~isempty(idx_10k)
                meanR2_10k = meanR2_param(idx_10k); % Extract single value
        
                % Plot dashed line from 10k dot to 500k dot
                plot([10000, 500000 - break_gap], [meanR2_10k, meanR2_500k_param(j)], '--', 'Color', color, 'LineWidth', lw, 'HandleVisibility', 'off');
            end
        
            % Plot 500k data point
            plot(500000 - break_gap, meanR2_500k_param(j), '.', 'Color', color, 'MarkerSize', ms, 'LineWidth', 2);
        end
    
    
    
            % Formatting
            title(clean_titles{paramIdx},'interpreter','latex', 'FontSize', fs); % Display SI, CX, etc.
            
            if paramIdx>=4
                xlabel('$N_{\textrm{train}}$','interpreter','latex','fontsize',fs);
            end    
            if paramIdx==1 || paramIdx==4
                ylabel('$R^2$','interpreter','latex','fontsize',fs);
            end
            grid on;
            box on;
            xticks([1000, 2000, 4000, 8000, 10000, 500000 - break_gap]);
            xticklabels({'1k', '2k', '4k', '8k', '10k', '500k'});
            set(gca, 'FontSize', fs);
            hold off;
    
            if paramIdx ==1
                legend({'No Feature Engineering', 'Concatenation', 'Reciprocals vs. time', 'Mutual reciprocals'}, ...
               'Location', 'south', 'Orientation', 'horizontal', 'FontSize', 15,'Numcolumns',1);
            end
    
        end
        
    %     sgtitle(fig_title, 'FontSize', fs + 5);
    end



end

function fig_2Dinfer_meanR2
        
    dataTable_test_2D_124810kdata = readtable('dataTable_test_2D_124810kdata.csv');
    dataTable_optm_2D_124810kdata = readtable('dataTable_optm_2D_124810kdata.csv');
    dataTable_optm_2D_500kdata = readtable('dataTable_optm_2D_500kdata.csv');
    dataTable_test_2D_500kdata = readtable('dataTable_test_2D_500kdata.csv');
    dataTable_test_2D_124810kdata=sortrows(dataTable_test_2D_124810kdata,{'ntrain', 'Activation', 'FeatureType'},'ascend');
    dataTable_optm_2D_124810kdata=sortrows(dataTable_optm_2D_124810kdata,{'ntrain', 'Activation', 'FeatureType'},'ascend');
    dataTable_test_2D_500kdata=sortrows(dataTable_test_2D_500kdata,{'ntrain', 'Activation', 'FeatureType'},'ascend');
    dataTable_optm_2D_500kdata=sortrows(dataTable_optm_2D_500kdata,{'ntrain', 'Activation', 'FeatureType'},'ascend');
    
    
    % Define feature types and colors
    colorMap = containers.Map({'fta_noFE', 'ftb_catonlytGIF', 'ftc_twithreciGIF', 'ftd_fullreci'}, {'r', 'g', 'b', 'k'});
    dispname = {'No Feature Engineering', 'Concatenation', 'Reciprocals vs. time', 'Mutual reciprocals'};
    
    % Extract 500k data separately (only npara == 6)
    
    feature_500k = dataTable_optm_2D_500kdata.FeatureType;
    activation_500k = dataTable_optm_2D_500kdata.Activation;
    meanR2_500k = dataTable_optm_2D_500kdata.Mean_R2;
    
    % Initialize figure
    figure;fs=25;ms=30;
    lw = 2;
    break_gap = 488000; % Distance between last normal point (10k) and 500k in plotting
    
    min_meanR2_values=zeros(4,1);
    
    % Loop through both datasets (test and optm)
    for plotIdx = 1:2
        if plotIdx == 1
            dataTable = dataTable_test_2D_124810kdata;
        else
            dataTable = dataTable_optm_2D_124810kdata;
        end
        
        % Extract relevant columns
        ntrain = dataTable.ntrain;
        featureType = dataTable.FeatureType;
        activation = dataTable.Activation;
        meanR2 = dataTable.Mean_R2;
    
        min_meanR2_relu = min(meanR2(strcmp(activation, 'relu')));
        min_meanR2_tanh = min(meanR2(strcmp(activation, 'tanh01')));
    
        % Store values for later reference
        min_meanR2_values(plotIdx * 2 - 1) = min_meanR2_relu;
        min_meanR2_values(plotIdx * 2) = min_meanR2_tanh;
    
    
        % Identify unique feature types
        unique_features = unique(featureType);
        
        % Plot ReLU activation (subplot 1 or 3)
        subplot(2, 2, plotIdx * 2 - 1);
        hold on;
        for i = 1:length(unique_features)
            idx = strcmp(activation, 'relu') & strcmp(featureType, unique_features{i});
            color = colorMap(unique_features{i});
            small_idx = idx & (ntrain <= 10000);
            plot(ntrain(small_idx), meanR2(small_idx), '-', 'DisplayName', dispname{i}, 'Color', color, 'LineWidth', lw);
            plot(ntrain(small_idx), meanR2(small_idx), '.', 'Color', color, 'MarkerSize', ms, 'HandleVisibility', 'off');
        end
    
    
        
        margin=(1-min_meanR2_relu)/10;
    %     disp(margin);
        ylim([min_meanR2_relu-margin 1]);
        
        px1=[10800 10900];
        py=[min_meanR2_relu-1.5*margin, min_meanR2_relu-0.5*margin];
    %     disp(py);
        height=100;px2=px1+height;
        h1=plot(px1,py,'k','LineWidth',5);hold all;h2=plot(px2,py,'k','LineWidth',5);hold all;
        hfill=fill([px1 flip(px2)],[py flip(py)],'w','EdgeColor','none');
        set(h1, 'Clipping', 'off');set(h2, 'Clipping', 'off');set(hfill, 'Clipping', 'off');
        set(gca,'fontsize',fs);
    
    
    
        
        idx_500k_relu = strcmp(activation_500k, 'relu');
        for j = 1:length(idx_500k_relu)
            if idx_500k_relu(j)
                color = colorMap(feature_500k{j});
                plot(500000 - break_gap, meanR2_500k(j), '.', 'Color', color, 'MarkerSize', ms, 'LineWidth', 2);
                idx_10k = find((ntrain == 10000) &  strcmp(activation, 'relu') & strcmp(featureType, feature_500k{j}), 1, 'first'); % Take the first match
                if ~isempty(idx_10k)
                    meanR2_10k = meanR2(idx_10k); % Extract single value
                    % Plot dashed line from 10k dot to 500k dot
                    plot([10000, 500000 - break_gap], [meanR2_10k, meanR2_500k(j)], '--', 'Color', color, 'LineWidth', lw, 'HandleVisibility', 'off');
                end
            
            end
        end
    
    %     inset_pos = [0.85, 0.85, 0.05, 0.1]; % [x, y, width, height] in normalized figure coordinates
    %     inset_ax = axes('Position', inset_pos, 'Box', 'on');
    %     hold(inset_ax, 'on');
    %     for j = 1:length(idx_500k_relu)
    %         if idx_500k_relu(j)
    %             color = colorMap(feature_500k{j});
    %             plot(inset_ax, 500000 - break_gap, meanR2_500k(j), '.', 'Color', color, 'MarkerSize', 28, 'LineWidth', 2, 'HandleVisibility', 'off');hold on;
    %         end
    %     end
    %     
    %     xlim(inset_ax, [500000 - break_gap - 5000, 500000 - break_gap + 5000]); % Adjust zoom level
    %     ylim(inset_ax, [min(meanR2_500k) - 0.02, max(meanR2_500k) + 0.02]); % Small margin around points
    %     
    %     set(inset_ax, 'XTick', [], 'YTick', [], 'FontSize', 12);
    % %     title(inset_ax, '500k Zoom', 'FontSize', 12);
    %     hold(inset_ax, 'off');
    
    
        if plotIdx==1
            title('ReLU Activation','fontsize',fs);
    
        elseif plotIdx==2
            xlabel('$N_{\textrm{train}}$','interpreter','latex','fontsize',fs);
        end
    
    
    
        ylabel('mean $R^2$','Interpreter','latex','fontsize',fs);
        if plotIdx==1
            legend({'No Feature Engineering', 'Concatenation', 'Reciprocals vs. time', 'Mutual reciprocals'}, ...
               'Location', 'south', 'FontSize', 15);
        end
    %     legend('Location', 'best','fontsize',15);
        grid on;box 'on';
        xticks([1000, 2000, 4000, 8000, 10000, 500000 - break_gap]);
        xticklabels({'1k', '2k', '4k', '8k', '10k', '500k'});
        hold off;
        
        % Plot tanh01 activation (subplot 2 or 4)
        subplot(2, 2, plotIdx * 2);
        hold on;
        for i = 1:length(unique_features)
            idx = strcmp(activation, 'tanh01') & strcmp(featureType, unique_features{i});
            color = colorMap(unique_features{i});
            
            small_idx = idx & (ntrain <= 10000);
            plot(ntrain(small_idx), meanR2(small_idx), '-', 'DisplayName', dispname{i}, 'Color', color, 'LineWidth', lw);hold on;
        
            % **Plot the dots separately (DOES NOT appear in legend)**
            plot(ntrain(small_idx), meanR2(small_idx), '.', 'Color', color, 'MarkerSize', ms, 'HandleVisibility', 'off');hold on;
        
        end
    
        margin=(1-min_meanR2_tanh)/10;
        ylim([min_meanR2_tanh-margin 1]);
        px1=[10800 10900];
        py=[min_meanR2_tanh-1.5*margin, min_meanR2_tanh-0.5*margin];
        height=100;px2=px1+height;
        h1=plot(px1,py,'k','LineWidth',5);hold all;h2=plot(px2,py,'k','LineWidth',5);hold all;
        hfill=fill([px1 flip(px2)],[py flip(py)],'w','EdgeColor','none');
        set(h1, 'Clipping', 'off');set(h2, 'Clipping', 'off');set(hfill, 'Clipping', 'off');
        set(gca,'fontsize',fs);
    
        idx_500k_tanh = strcmp(activation_500k, 'tanh01');
        for j = 1:length(idx_500k_tanh)
            if idx_500k_tanh(j)
                color = colorMap(feature_500k{j});
                plot(500000 - break_gap, meanR2_500k(j), '.', 'Color', color, 'MarkerSize', 28, 'LineWidth', 2);
                idx_10k = find((ntrain == 10000) &  strcmp(activation, 'tanh01') & strcmp(featureType, feature_500k{j}), 1, 'first'); % Take the first match
                if ~isempty(idx_10k)
                    meanR2_10k = meanR2(idx_10k); % Extract single value
        
                    
                    % Plot dashed line from 10k dot to 500k dot
                    plot([10000, 500000 - break_gap], [meanR2_10k, meanR2_500k(j)], '--', 'Color', color, 'LineWidth', lw, 'HandleVisibility', 'off');
                end
    
            end
        end
     
    
        if plotIdx==1
            title('(tanh(x)+1)/2 Activation','fontsize',fs);
    
        elseif plotIdx==2
            xlabel('$N_{\textrm{train}}$','interpreter','latex','fontsize',fs);
        end
    
    %     title('tanh01 Activation');
    %     xlabel('ntrain');
    %     ylabel('meanR2');
    %     legend({'No Feature Engineering', 'Concatenation', 'Reciprocals vs. time', 'Mutual reciprocals'}, ...
    %        'Location', 'south', 'FontSize', 15);
        grid on;box 'on';
        xticks([1000, 2000, 4000, 8000, 10000, 500000 - break_gap]);
        xticklabels({'1k', '2k', '4k', '8k', '10k', '500k'});
    
    
        % Define inset position (adjust as needed)
    %     inset_pos = [0.85, 0.85, 0.05, 0.1]; % [x, y, width, height] in normalized figure coordinates
    %     inset_ax = axes('Position', inset_pos, 'Box', 'on');
    %     hold(inset_ax, 'on');
    %     for j = 1:length(idx_500k_relu)
    %         if idx_500k_relu(j)
    %             color = colorMap(feature_500k{j});
    %             plot(inset_ax, 500000 - break_gap, meanR2_500k(j), '.', 'Color', color, 'MarkerSize', 28, 'LineWidth', 2);hold on;
    %         end
    %     end
    %     
    %     xlim(inset_ax, [500000 - break_gap - 5000, 500000 - break_gap + 5000]); % Adjust zoom level
    %     ylim(inset_ax, [min(meanR2_500k) - 0.02, max(meanR2_500k) + 0.02]); % Small margin around points
    %     
    %     set(inset_ax, 'XTick', [], 'YTick', [], 'FontSize', 12);
    % %     title(inset_ax, '500k Zoom', 'FontSize', 12);
    %     hold(inset_ax, 'off');
    
    
    
        hold off;
    end


end

function fig_2Dinfer_paraR2

    dataTable_test_2D_124810kdata = readtable('dataTable_test_2D_124810kdata.csv');
dataTable_optm_2D_124810kdata = readtable('dataTable_optm_2D_124810kdata.csv');
dataTable_optm_2D_500kdata = readtable('dataTable_optm_2D_500kdata.csv');
dataTable_test_2D_500kdata = readtable('dataTable_test_2D_500kdata.csv');

dataTable_test_2D_124810kdata = sortrows(dataTable_test_2D_124810kdata, {'ntrain', 'Activation', 'FeatureType'}, 'ascend');
dataTable_optm_2D_124810kdata = sortrows(dataTable_optm_2D_124810kdata, {'ntrain', 'Activation', 'FeatureType'}, 'ascend');

% Extract 500k data separately (only for tanh activation and npara == 6)
idx_500k_test = (dataTable_test_2D_500kdata.ntrain == 500000) & ...
                strcmp(dataTable_test_2D_500kdata.Activation, 'tanh01');
idx_500k_optm = (dataTable_optm_2D_500kdata.ntrain == 500000) & ...
                strcmp(dataTable_optm_2D_500kdata.Activation, 'tanh01');

feature_500k_test = dataTable_test_2D_500kdata.FeatureType(idx_500k_test);
feature_500k_optm = dataTable_optm_2D_500kdata.FeatureType(idx_500k_optm);

% Define correct column names for each dataset
param_names_124810k = {'Sfal', 'Pxa', 'Sffb', 'PXFCR', 'Fb'};
param_names_500k = {'R2_Sfal', 'R2_Pxa', 'R2_Sffb', 'R2_PXFCR', 'R2_Fb'};

% Define clean titles for subplots
% clean_titles = {'Sfal', 'Pxa', 'Sffb', 'PXFCR', 'Fb'};
clean_titles = {'$S_{GF}$',  '$P_{X\alpha}$','$S_{Fb}$', '$P_X$', '$F_b$'};


% Define feature types and colors
colorMap = containers.Map({'fta_noFE', 'ftb_catonlytGIF', 'ftc_twithreciGIF', 'ftd_fullreci'}, {'r', 'g', 'b', 'k'});
dispname = {'No Feature Engineering', 'Concatenation', 'Reciprocals vs. time', 'Mutual reciprocals'};

% Loop for both figures (1: test_2D, 2: optm_2D)
for figIdx = 1:2
    if figIdx == 1
        dataTable = dataTable_test_2D_124810kdata;
        dataTable_500k = dataTable_test_2D_500kdata;
        idx_500k = idx_500k_test;
        feature_500k = feature_500k_test;
        param_names = param_names_124810k; % Use test data column names
        param_names_500k = param_names_500k; % Use R2_* for 500k data
        fig_title = 'Testing Data (tanh)';
    else
        dataTable = dataTable_optm_2D_124810kdata;
        dataTable_500k = dataTable_optm_2D_500kdata;
        idx_500k = idx_500k_optm;
        feature_500k = feature_500k_optm;
        param_names = param_names_124810k; % Use optm data column names
        param_names_500k = param_names_500k; % Use R2_* for 500k data
        fig_title = 'Optimized Data (tanh)';
    end
    
    % Initialize figure
    figure;
    fs = 25;ms=30;
    lw = 2;
    break_gap = 488000;

    % Extract relevant columns
    ntrain = dataTable.ntrain;
    featureType = dataTable.FeatureType;
    activation = dataTable.Activation;

    % Loop through five parameters
    for paramIdx = 1:5
        subplot(2, 3, paramIdx);
        hold on;

        % Extract R2 values for the current parameter
        meanR2_param = dataTable.(param_names{paramIdx});
        min_meanR2_param = min(meanR2_param(strcmp(activation, 'tanh01')));

        % Identify unique feature types
        unique_features = unique(featureType);

        % Plot curves for each feature type
        for i = 1:length(unique_features)
            idx = strcmp(activation, 'tanh01') & strcmp(featureType, unique_features{i});
            color = colorMap(unique_features{i});
            
            % Filter for small ntrain values (<=10k)
            small_idx = idx & (ntrain <= 10000);
            plot(ntrain(small_idx), meanR2_param(small_idx), '-', 'DisplayName', dispname{i}, 'Color', color, 'LineWidth', lw);
            plot(ntrain(small_idx), meanR2_param(small_idx), '.', 'Color', color, 'MarkerSize', ms, 'HandleVisibility', 'off');
        end
        
        % Set y-axis limits
        margin = (1 - min_meanR2_param) / 10;
        ylim([min_meanR2_param - margin, 1]);

        % Plot axis break "//"
        px1 = [10800 10900];
        py = [min_meanR2_param - 1.5 * margin, min_meanR2_param - 0.5 * margin];
        height = 100;
        px2 = px1 + height;
        h1 = plot(px1, py, 'k', 'LineWidth', 5);
        h2 = plot(px2, py, 'k', 'LineWidth', 5);
        hfill = fill([px1 flip(px2)], [py flip(py)], 'w', 'EdgeColor', 'none');
        set(h1, 'Clipping', 'off');
        set(h2, 'Clipping', 'off');
        set(hfill, 'Clipping', 'off');
 set(gca,'fontsize',fs);
% 
%         % Plot 500k data points
%         meanR2_500k_param = dataTable_500k.(param_names_500k{paramIdx})(idx_500k);
%         [unique_features_500k, unique_idx] = unique(feature_500k, 'stable'); % Ensure only one per feature
%         for j = 1:length(unique_features_500k)
%             color = colorMap(unique_features_500k{j});
%             plot(500000 - break_gap, meanR2_500k_param(unique_idx(j)), '.', 'Color', color, 'MarkerSize', 28, 'LineWidth', 2);
%         end

% Plot 500k data points and add dashed line from 10k to 500k
meanR2_500k_param = dataTable_500k.(param_names_500k{paramIdx})(idx_500k);
[unique_features_500k, unique_idx] = unique(feature_500k, 'stable'); % Ensure only one per feature
for j = 1:length(unique_features_500k)
    color = colorMap(unique_features_500k{j});

    % Find meanR2 at ntrain = 10k for the same feature type
    idx_10k = find((ntrain == 10000) & strcmp(activation, 'tanh01') & strcmp(featureType, unique_features_500k{j}), 1, 'first'); % Take first match
    if ~isempty(idx_10k)
        meanR2_10k = meanR2_param(idx_10k); % Extract single value

        % Plot dashed line from 10k dot to 500k dot
        plot([10000, 500000 - break_gap], [meanR2_10k, meanR2_500k_param(unique_idx(j))], '--', 'Color', color, 'LineWidth', lw, 'HandleVisibility', 'off');
    end

    % Plot 500k data point
    plot(500000 - break_gap, meanR2_500k_param(unique_idx(j)), '.', 'Color', color, 'MarkerSize', ms, 'LineWidth', 2);
end

        
        
        % Formatting
        title(clean_titles{paramIdx},'interpreter','latex', 'FontSize', fs); % Display SI, CX, etc.
            
         if paramIdx>=3
            xlabel('$N_{\textrm{train}}$','interpreter','latex','fontsize',fs);
        end    
        if paramIdx==1 || paramIdx==4
            ylabel('$R^2$','interpreter','latex','fontsize',fs);
        end
        
        grid on;
        box on;
        xticks([1000, 2000, 4000, 8000, 10000, 500000 - break_gap]);
        xticklabels({'1k', '2k', '4k', '8k', '10k', '500k'});
        set(gca, 'FontSize', fs);
        hold off;

        if paramIdx==1
                % Legend (only once, outside subplots)
            if figIdx==1
                legend({'No Feature Engineering', 'Concatenation', 'Reciprocals vs. time', 'Mutual reciprocals'}, ...
                    'Location', 'south', 'Orientation', 'horizontal', 'FontSize', 15,'NumColumns',1);
            elseif figIdx==2
                 legend({'No Feature Engineering', 'Concatenation', 'Reciprocals vs. time', 'Mutual reciprocals'}, ...
                    'Location', 'north', 'Orientation', 'horizontal', 'FontSize', 15,'NumColumns',1);

            end
        end
    end
    


    % Set figure title
%     sgtitle(fig_title, 'FontSize', fs + 5);
end
 

end
 

 